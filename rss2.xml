<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Namgung Jong Min</title>
    <link>https://NamgungJongMin.github.io/</link>
    
    <atom:link href="https://namgungjongmin.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description></description>
    <pubDate>Mon, 10 Feb 2025 05:14:12 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>WEGO ) 레이아웃 시프팅 현상을 해결하여 CLS 지표 개선하기</title>
      <link>https://namgungjongmin.github.io/2025/01/21/project/wego/cls%EC%B5%9C%EC%A0%81%ED%99%94/</link>
      <guid>https://namgungjongmin.github.io/2025/01/21/project/wego/cls%EC%B5%9C%EC%A0%81%ED%99%94/</guid>
      <pubDate>Tue, 21 Jan 2025 11:12:15 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/vbghdl/post/921dd816-acad-468d-b160-8e912a3d9f5f/image.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;▪︎-CLS란-무엇일까&quot;&gt;&lt;a href=</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://velog.velcdn.com/images/vbghdl/post/921dd816-acad-468d-b160-8e912a3d9f5f/image.png"></p><h1 id="▪︎-CLS란-무엇일까"><a href="#▪︎-CLS란-무엇일까" class="headerlink" title="▪︎ CLS란 무엇일까?"></a>▪︎ <strong>CLS란 무엇일까?</strong></h1><p>CLS(Cumulative Layout Shift)는 Google의 Core Web Vitals 중 하나로, 페이지 로딩 과정에서 발생하는 예기치 않은 레이아웃 이동을 측정하는 지표입니다. 쉽게 말해, 페이지가 얼마나 ‘덜컥거리는지’를 수치화한 것입니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[CLS 점수 기준]</span><br><span class="line">좋음: 0.1 이하</span><br><span class="line">개선 필요: 0.1 ~ 0.25</span><br><span class="line">나쁨: 0.25 이상</span><br></pre></td></tr></table></figure><p>CLS 수치가 점수 기준에서 합격점이라 할지라도 실제 페이지에서 유저가 경험할 때 부자연스러운 부분들이 있을 수 있습니다. WEGO 프로젝트에서 시프팅 현상으로 인한 부자연스로운 페이지 로딩의 예시를 살펴보고, 개선 방법들을 적용하여 실제 CLS 지표의 변화까지 살펴보겠습니다.</p><h1 id="▪︎-레이아웃-시프트가-사용자-경험에-미치는-영향"><a href="#▪︎-레이아웃-시프트가-사용자-경험에-미치는-영향" class="headerlink" title="▪︎ 레이아웃 시프트가 사용자 경험에 미치는 영향"></a>▪︎ 레이아웃 시프트가 사용자 경험에 미치는 영향</h1><p>레이아웃 시프트는 다음과 같은 부정적인 영향을 미칩니다.</p><h2 id="▫︎-사용자-불편"><a href="#▫︎-사용자-불편" class="headerlink" title="▫︎ 사용자 불편"></a>▫︎ <strong>사용자 불편</strong></h2><ul><li>읽고 있던 텍스트의 위치가 갑자기 변경</li><li>클릭하려던 버튼이 순간적으로 이동</li><li>스크롤 위치의 예상치 못한 변화</li></ul><h2 id="▫︎-신뢰성-저하"><a href="#▫︎-신뢰성-저하" class="headerlink" title="▫︎ 신뢰성 저하"></a>▫︎ <strong>신뢰성 저하</strong></h2><ul><li>웹사이트의 완성도가 떨어져 보임</li><li>전문성에 대한 의구심 유발</li><li>사용자의 재방문율 감소</li></ul><h1 id="▪︎-프로젝트에서-발견된-CLS-이슈"><a href="#▪︎-프로젝트에서-발견된-CLS-이슈" class="headerlink" title="▪︎ 프로젝트에서 발견된 CLS 이슈"></a>▪︎ 프로젝트에서 발견된 CLS 이슈</h1><h2 id="▫︎-스크롤바-시프팅"><a href="#▫︎-스크롤바-시프팅" class="headerlink" title="▫︎ 스크롤바 시프팅"></a>▫︎ 스크롤바 시프팅</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[문제 상황]</span><br><span class="line">1. 초기 페이지 로드 시 데이터 없음 -&gt; 스크롤바 없음</span><br><span class="line">2. 데이터 로드 완료 -&gt; 스크롤바 생성</span><br><span class="line">3. 페이지 너비가 스크롤바 너비만큼 감소</span><br><span class="line">4. 전체 레이아웃이 왼쪽으로 시프트</span><br></pre></td></tr></table></figure><p><img src="https://velog.velcdn.com/images/vbghdl/post/03240db9-3c9c-4e90-8cce-ac339c9b74c4/image.png" alt="image.png"></p><h3 id="해결-방안-1-min-height"><a href="#해결-방안-1-min-height" class="headerlink" title="해결 방안 1) min-height"></a>해결 방안 1) min-height</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 항상 스크롤바 공간 확보 */</span></span><br><span class="line"><span class="selector-class">.page-container</span> &#123;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">101</span>dvh; <span class="comment">/* 스크롤바가 항상 표시되도록 설정 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>간단하면서 효율적인 방식으로 해결하는 방법으로 min-height에 적정한 값을 주어 항상 스크롤이 존재하는 페이지로 보여주는 방법을 적용하였습니다.</p><h3 id="해결-방안-2-Skeleton-UI"><a href="#해결-방안-2-Skeleton-UI" class="headerlink" title="해결 방안 2) Skeleton UI"></a>해결 방안 2) Skeleton UI</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">   <span class="keyword">if</span> (isLoading) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">ReviewSkeleton</span> /&gt;</span></span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>데이터 페칭이 진행중일 때, 스크롤바가 생길 정도의 데이터만큼 스켈레톤 UI를 렌더링하여 스크롤바가 존재하도록 하였습니다.</p><ul><li>위 두가지 방법을 통해 페이지 초기 로드 시부터 스크롤바 공간을 확보하여 레이아웃의 변화가 없도록 하였고 일관된 사용자 경험을 제공할 수 있었습니다.</li></ul><h3 id="개선-이후-측정-결과"><a href="#개선-이후-측정-결과" class="headerlink" title="개선 이후 측정 결과"></a>개선 이후 측정 결과</h3><p><img src="https://velog.velcdn.com/images/vbghdl/post/fd4f4a7e-44e8-4050-b2f2-ad8af599ccc2/image.png" alt="image.png"></p><h2 id="▫︎-이미지-시프팅"><a href="#▫︎-이미지-시프팅" class="headerlink" title="▫︎ 이미지 시프팅"></a>▫︎ 이미지 시프팅</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Image</span></span><br><span class="line">  src=&#123;travelImage&#125;</span><br><span class="line">  alt=&#123;<span class="string">`<span class="subst">$&#123;travelName&#125;</span> - <span class="subst">$&#123;travelLocation&#125;</span> 여행 이미지`</span>&#125;</span><br><span class="line">  width=&#123;<span class="number">300</span>&#125;</span><br><span class="line">  height=&#123;<span class="number">300</span>&#125;</span><br><span class="line">  className=<span class="string">&quot;h-full w-full rounded object-cover&quot;</span> <span class="comment">// 이미지 로드 전후로 스타일 변경</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>이미지가 로드되면서 object-fit의 기본값에서 object-cover가 적용되는 과정이 화면에 보여지며 덜컥거리는 현상이 발생하였습니다.</p><p><img src="https://velog.velcdn.com/images/vbghdl/post/38b10722-7549-4d1e-b019-c6b6c494f4ab/image.png" alt="image.png"></p><h3 id="해결방안"><a href="#해결방안" class="headerlink" title="해결방안"></a>해결방안</h3><p>이를 해결하기 위해 Next.js Image 컴포넌트의 onLoadingComplete 속성을 적용하여 이미지가 완전 로드되기 전까지는 투명상태를 유지하고, 로드 완료 시 부드러운 페이드인 효과를 적용하였습니다.</p><h3 id="개선-이후-측정-결과-1"><a href="#개선-이후-측정-결과-1" class="headerlink" title="개선 이후 측정 결과"></a>개선 이후 측정 결과</h3><p><img src="https://velog.velcdn.com/images/vbghdl/post/f3794c68-4a73-46af-ba0f-2937e6d45b55/image.png" alt="image.png"></p><h1 id="▪︎-개선-효과"><a href="#▪︎-개선-효과" class="headerlink" title="▪︎ 개선 효과"></a>▪︎ 개선 효과</h1><ol><li><strong>사용자 경험 향상</strong><ul><li>부드러운 페이지 전환</li><li>예측 가능한 인터랙션</li><li>전문적인 웹사이트 인상</li></ul></li><li><strong>성능 지표 개선</strong><ul><li>CLS 점수 0.1 이하 달성</li><li>Core Web Vitals 전반적 향상</li><li>모바일 사용성 개선</li></ul></li><li><strong>비즈니스 효과</strong><ul><li>사용자 이탈률 감소</li><li>페이지 체류 시간 증가</li><li>전환율 향상 가능성</li></ul></li></ol><h1 id="▪︎-마치며"><a href="#▪︎-마치며" class="headerlink" title="▪︎ 마치며"></a>▪︎ 마치며</h1><p>CLS 최적화는 단순한 성능 지표의 개선을 넘어 사용자 경험의 질적 향상을 가져옵니다. 특히 무한 스크롤이나 동적 이미지 로딩이 많은 현대 웹 애플리케이션에서는 필수적인 최적화 요소입니다. 우리 프로젝트에서 적용한 두 가지 해결 방안은 간단하면서도 효과적인 CLS 최적화 전략의 좋은 예시가 될 수 있습니다.</p>]]></content:encoded>
      
      
      <category domain="https://NamgungJongMin.github.io/categories/Project/">Project</category>
      
      
      <category domain="https://NamgungJongMin.github.io/tags/WEGO/">WEGO</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/">프로젝트</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/CLS-%EC%B5%9C%EC%A0%81%ED%99%94/">CLS 최적화</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%8A%A4%ED%81%AC%EB%A1%A4-%EC%8B%9C%ED%94%84%ED%8C%85/">스크롤 시프팅</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EC%8B%9C%ED%94%84%ED%8C%85/">레이아웃 시프팅</category>
      
      
      <comments>https://namgungjongmin.github.io/2025/01/21/project/wego/cls%EC%B5%9C%EC%A0%81%ED%99%94/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>WEGO ) Skeleton UI를 활용한 웹 성능 및 사용자 경험 최적화</title>
      <link>https://namgungjongmin.github.io/2025/01/20/project/wego/skeleton/</link>
      <guid>https://namgungjongmin.github.io/2025/01/20/project/wego/skeleton/</guid>
      <pubDate>Mon, 20 Jan 2025 14:32:35 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/vbghdl/post/921dd816-acad-468d-b160-8e912a3d9f5f/image.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;웹 애플리케이션에서 데이터</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://velog.velcdn.com/images/vbghdl/post/921dd816-acad-468d-b160-8e912a3d9f5f/image.png"></p><blockquote><p>웹 애플리케이션에서 데이터 로딩은 피할 수 없는 과정입니다. 특히 네트워크 상태가 불안정하거나 대량의 데이터를 처리해야 하는 경우, 사용자는 빈 화면이나 로딩 스피너를 보며 기다려야 합니다. 이러한 대기 시간은 사용자 경험을 저하시키는 주요 요인이 됩니다. 이 문제를 해결하기 위해 저희는 스켈레톤 UI를 구현하여 적용했습니다.</p></blockquote><h1 id="▪︎-Skeleton-UI-구현-과정"><a href="#▪︎-Skeleton-UI-구현-과정" class="headerlink" title="▪︎ Skeleton UI 구현 과정"></a>▪︎ Skeleton UI 구현 과정</h1><h2 id="▫︎-기본-스타일-설정"><a href="#▫︎-기본-스타일-설정" class="headerlink" title="▫︎ 기본 스타일 설정"></a>▫︎ 기본 스타일 설정</h2><p>먼저 Tailwind 설정 파일에서 스켈레톤 UI의 기본 스타일을 정의했습니다. 스켈레톤 UI의 핵심은 로딩 상태를 시각적으로 표현하는 애니메이션입니다. 이를 위해 그라데이션 효과와 움직임을 결합했습니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// tailwind.config.ts</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">addUtilities</span>(&#123;</span><br><span class="line">  <span class="string">&quot;.skeleton-style&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">background</span>: <span class="string">&quot;linear-gradient(90deg, #E5E7EB 35%, #F3F4F6 50%, #E5E7EB 65%)&quot;</span>,</span><br><span class="line">    <span class="attr">backgroundSize</span>: <span class="string">&quot;300% auto&quot;</span>,</span><br><span class="line">    <span class="attr">animation</span>: <span class="string">&quot;skeleton-loading 1.5s ease-in-out infinite&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;@keyframes skeleton-loading&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;0%&quot;</span>: &#123; <span class="attr">backgroundPosition</span>: <span class="string">&quot;100% 0&quot;</span> &#125;,</span><br><span class="line">    <span class="string">&quot;100%&quot;</span>: &#123; <span class="attr">backgroundPosition</span>: <span class="string">&quot;0 0&quot;</span> &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>이 설정은 세 가지 주요 요소로 구성됩니다.</p><ul><li>그라데이션 배경: 밝은 회색(#F3F4F6)에서 어두운 회색(#E5E7EB)으로 자연스럽게 변화</li><li>배경 크기: 실제 요소보다 3배 큰 배경을 설정하여 부드러운 이동 효과 구현</li><li>애니메이션: 1.5초 동안 배경이 좌우로 움직이며 무한 반복</li></ul><h2 id="▫︎-재사용-가능한-스켈레톤-컴포넌트"><a href="#▫︎-재사용-가능한-스켈레톤-컴포넌트" class="headerlink" title="▫︎ 재사용 가능한 스켈레톤 컴포넌트"></a>▫︎ <strong>재사용 가능한 스켈레톤 컴포넌트</strong></h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Skeleton.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Skeleton</span> = (<span class="params">&#123; className, classNameCondition &#125;: Props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&#123;cn(</span>&quot;<span class="attr">skeleton-style</span>&quot;, <span class="attr">className</span>, <span class="attr">classNameCondition</span>)&#125; /&gt;</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이 컴포넌트는 단순하지만 유연합니다. className prop을 통해 각 사용처에 맞는 크기와 스타일을 적용할 수 있으며, classNameCondition을 통해 조건부 스타일링도 가능합니다.</p><h2 id="▫︎-실제-적용-여행-카드-스켈레톤"><a href="#▫︎-실제-적용-여행-카드-스켈레톤" class="headerlink" title="▫︎ 실제 적용 (여행 카드 스켈레톤)"></a>▫︎ 실제 적용 (여행 카드 스켈레톤)</h2><p>마이페이지에서 MyTravelCardSkeleton 을 적용한 예시입니다. 실제 데이터가 로드되기 전의 UI를 표현합니다.</p><h3 id="컴포넌트에-적용할-Skeleton-UI-작성"><a href="#컴포넌트에-적용할-Skeleton-UI-작성" class="headerlink" title="컴포넌트에 적용할 Skeleton UI 작성"></a>컴포넌트에 적용할 Skeleton UI 작성</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyTravelCardSkeleton.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MyTravelCardSkeleton</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;w-full max-w-[335px] pb-10 md:max-w-[688px] xl:max-w-[1400px]&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;grid w-full gap-5 xl:grid-cols-2 xl:gap-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;Array.from(&#123; length: 6 &#125;).map((_, index) =&gt; (</span></span><br><span class="line"><span class="language-xml">          // eslint-disable-next-line react/no-array-index-key</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;</span>`<span class="attr">skeleton-</span>$&#123;<span class="attr">index</span>&#125;`&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;relative flex max-w-[335px] gap-4 md:max-w-[688px] md:gap-9&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Skeleton</span> <span class="attr">className</span>=<span class="string">&quot;h-[120px] w-[100px] flex-shrink-0 rounded md:h-[160px] md:w-[223px]&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;relative flex w-full flex-col justify-between&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex flex-col gap-1&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">Skeleton</span> <span class="attr">className</span>=<span class="string">&quot;h-5 w-12 rounded-[20px]&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">Skeleton</span> <span class="attr">className</span>=<span class="string">&quot;h-6 w-full md:h-[26px]&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex flex-col gap-2.5&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">Skeleton</span> <span class="attr">className</span>=<span class="string">&quot;h-5 w-full&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">Skeleton</span> <span class="attr">className</span>=<span class="string">&quot;h-4 w-full&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Skeleton</span> <span class="attr">className</span>=<span class="string">&quot;mt-5 h-[1px] w-full max-w-[1400px]&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ))&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="마이페이지-여행-카드에-적용"><a href="#마이페이지-여행-카드에-적용" class="headerlink" title="마이페이지 여행 카드에 적용"></a>마이페이지 여행 카드에 적용</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Upcomming</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> itemsPerPage = <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">const</span> [currentPage, setCurrentPage] = <span class="title function_">useState</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: travels, isLoading &#125; = <span class="title function_">useUpcommingTravel</span>(itemsPerPage, currentPage - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> totalPages = travels ? <span class="title class_">Math</span>.<span class="title function_">ceil</span>(travels.<span class="property">data</span>.<span class="property">total</span> / itemsPerPage) : <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">paginate</span> = (<span class="params">pageNumber: <span class="built_in">number</span></span>) =&gt; <span class="title function_">setCurrentPage</span>(pageNumber);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isLoading) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">MyTravelCardSkeleton</span> /&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">section</span> <span class="attr">className</span>=<span class="string">&quot;w-full max-w-[335px] pb-10 md:max-w-[688px] xl:max-w-[1400px]&quot;</span> <span class="attr">data-testid</span>=<span class="string">&quot;upcomming-travels&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;travels &amp;&amp; travels.data.total &gt; 0 ? (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;grid w-full gap-5 xl:grid-cols-2 xl:gap-6&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;travels.data?.content.map((travel: TravelCardProps) =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">key</span>=<span class="string">&#123;travel.travelId&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">TravelCard</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">key</span>=<span class="string">&#123;travel.travelId&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">travelId</span>=<span class="string">&#123;travel.travelId&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">travelImage</span>=<span class="string">&#123;travel.travelImage&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">isDomestic</span>=<span class="string">&#123;travel.isDomestic&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">travelName</span>=<span class="string">&#123;travel.travelName&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">travelLocation</span>=<span class="string">&#123;travel.travelLocation&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">maxTravelMateCount</span>=<span class="string">&#123;travel.maxTravelMateCount&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">currentTravelMateCount</span>=<span class="string">&#123;travel.currentTravelMateCount&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">startAt</span>=<span class="string">&#123;travel.startAt&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">endAt</span>=<span class="string">&#123;travel.endAt&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">bookmarkFlag</span>=<span class="string">&#123;travel.bookmarkFlag&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">formattedStartDate</span>=<span class="string">&#123;checkTomorrow(travel.startAt)&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">HorizontalDivider</span> <span class="attr">className</span>=<span class="string">&quot;mt-5 xl:mt-6&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      ) : (</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">NoTravel</span> <span class="attr">message</span>=<span class="string">&quot;아직 참여한 여행이 없어요!&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      )&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Pagination</span> <span class="attr">totalPages</span>=<span class="string">&#123;totalPages&#125;</span> <span class="attr">currentPage</span>=<span class="string">&#123;currentPage&#125;</span> <span class="attr">paginate</span>=<span class="string">&#123;paginate&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이 컴포넌트는 실제 여행 카드 리스트와 동일한 레이아웃을 가지며, 반응형 디자인을 지원합니다. 6개의 더미 카드를 생성하여 데이터 로딩 중에도 페이지의 구조를 명확히 보여줍니다.</p><h2 id="▫︎-완성된-Skeleton-UI"><a href="#▫︎-완성된-Skeleton-UI" class="headerlink" title="▫︎ 완성된 Skeleton UI"></a>▫︎ 완성된 Skeleton UI</h2><p><img src="https://velog.velcdn.com/images/vbghdl/post/9360c31a-bde2-404e-8f58-a4a0c28f1b19/image.gif" alt="image.png"></p><h1 id="▪︎-효과"><a href="#▪︎-효과" class="headerlink" title="▪︎ 효과"></a>▪︎ 효과</h1><p>스켈레톤 UI 구현은 Core Web Vitals를 포함한 주요 웹 성능 메트릭스의 개선에 큰 영향을 미쳤습니다. 성능의 개선은 사용자 경험 향상으로도 이어집니다.</p><h2 id="▫︎-FCP-First-Contentful-Paint-최적화"><a href="#▫︎-FCP-First-Contentful-Paint-최적화" class="headerlink" title="▫︎ FCP(First Contentful Paint) 최적화"></a>▫︎ <strong>FCP(First Contentful Paint) 최적화</strong></h2><p>스켈레톤 UI는 FCP 개선에도 기여합니다. 페이지의 첫 번째 의미 있는 콘텐츠가 그려지는 시점이 빨라지기 때문입니다.</p><ul><li><strong>즉각적인 시각적 피드백</strong>: 스켈레톤 UI는 실제 콘텐츠보다 훨씬 가벼워, 페이지 진입 시 즉시 렌더링됩니다.</li><li><strong>점진적 로딩</strong>: 메인 콘텐츠가 로드되는 동안 의미 있는 UI를 제공하여 체감 LCP를 개선합니다.</li><li><strong>레이아웃 안정성</strong>: CLS(Cumulative Layout Shift) 또한 개선되어, 콘텐츠 로드 시 레이아웃 변화를 최소화합니다.</li></ul><p><img src="https://velog.velcdn.com/images/vbghdl/post/6091e539-ba73-431b-af15-f0ebd88f1de3/image.png"></p><p>Chrome Dev Tools의 성능 탭에서 같은 조건으로 확인해봤을 때 다음과 같은 차이가 있었습니다. 생각보다 큰 차이가 있어 놀랐습니다.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[스켈레톤 UI 적용 전]</span><br><span class="line">FCP: 559.8ms</span><br><span class="line"></span><br><span class="line">[스켈레톤 UI 적용 후]</span><br><span class="line">FCP: 119ms (약 78% 개선)</span><br></pre></td></tr></table></figure><p>이러한 성능 개선은 특히 모바일 사용자와 불안정한 네트워크 환경에서 더욱 큰 효과를 발휘합니다. Google의 Core Web Vitals 지표 개선은 검색 엔진 최적화(SEO)에도 긍정적인 영향을 미치며, 이는 결과적으로 웹사이트의 가시성 향상으로 이어집니다.</p><h1 id="▪︎-마치며"><a href="#▪︎-마치며" class="headerlink" title="▪︎ 마치며"></a>▪︎ 마치며</h1><p>스켈레톤 UI 구현을 통해 다음과 같은 효과를 얻을 수 있었습니다:</p><ol><li><strong>인지된 성능 향상</strong><ul><li>사용자는 빈 화면이나 로딩 스피너 대신 콘텐츠의 구조를 즉시 확인할 수 있습니다.</li><li>이는 실제 로딩 시간이 동일하더라도 더 빠르게 느껴지는 효과를 줍니다.</li></ul></li><li><strong>자연스러운 전환</strong><ul><li>스켈레톤에서 실제 콘텐츠로의 전환이 부드럽게 이루어집니다.</li><li>레이아웃 시프트가 최소화되어 더 안정적인 사용자 경험을 제공합니다.</li></ul></li><li><strong>프로그레시브 로딩</strong><ul><li>페이지의 구조가 먼저 로드되어 사용자가 전체적인 레이아웃을 파악할 수 있습니다.</li><li>이는 특히 모바일 환경에서 중요한 이점을 제공합니다.</li></ul></li><li><strong>반응형 디자인 지원</strong><ul><li>스켈레톤 UI도 실제 컴포넌트와 동일한 반응형 규칙을 따릅니다.</li><li>모든 화면 크기에서 일관된 로딩 경험을 제공합니다.</li><li></li></ul></li></ol><p>이러한 스켈레톤 UI 구현은 단순한 시각적 개선을 넘어 전반적인 사용자 경험 향상에 기여했습니다.</p><p>특히 네트워크 상태가 불안정한 모바일 환경에서 더욱 효과적으로 작동하며, 사용자의 이탈률을 줄이는 데 도움이 될 것이라 생각합니다.</p>]]></content:encoded>
      
      
      <category domain="https://NamgungJongMin.github.io/categories/Project/">Project</category>
      
      
      <category domain="https://NamgungJongMin.github.io/tags/WEGO/">WEGO</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/">프로젝트</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/Skeleton-UI/">Skeleton UI</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/FCP-%EC%B5%9C%EC%A0%81%ED%99%94/">FCP 최적화</category>
      
      
      <comments>https://namgungjongmin.github.io/2025/01/20/project/wego/skeleton/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>WEGO ) 커스텀 훅을 활용한 인증 폼 구현과 리렌더링 최적화</title>
      <link>https://namgungjongmin.github.io/2025/01/17/project/wego/%EC%9D%B8%EC%A6%9D%ED%8F%BC%EA%B5%AC%ED%98%84/</link>
      <guid>https://namgungjongmin.github.io/2025/01/17/project/wego/%EC%9D%B8%EC%A6%9D%ED%8F%BC%EA%B5%AC%ED%98%84/</guid>
      <pubDate>Fri, 17 Jan 2025 12:52:55 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/vbghdl/post/921dd816-acad-468d-b160-8e912a3d9f5f/image.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;▪︎-로그인-폼-구현-과정과-고민들&quot;&gt;&lt;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://velog.velcdn.com/images/vbghdl/post/921dd816-acad-468d-b160-8e912a3d9f5f/image.png"></p><h1 id="▪︎-로그인-폼-구현-과정과-고민들"><a href="#▪︎-로그인-폼-구현-과정과-고민들" class="headerlink" title="▪︎ 로그인 폼 구현 과정과 고민들"></a>▪︎ 로그인 폼 구현 과정과 고민들</h1><h2 id="▫︎-상태-관리-방식의-선택"><a href="#▫︎-상태-관리-방식의-선택" class="headerlink" title="▫︎ 상태 관리 방식의 선택"></a>▫︎ 상태 관리 방식의 선택</h2><p>로그인 폼을 구현할 때 가장 먼저 고민했던 것은 입력값을 어떤 방식으로 관리할 것인가였습니다. React에서는 크게 두 가지 접근 방식이 있습니다:</p><h3 id="제어-컴포넌트-Controlled-Component"><a href="#제어-컴포넌트-Controlled-Component" class="headerlink" title="제어 컴포넌트 (Controlled Component)"></a><strong>제어 컴포넌트 (Controlled Component)</strong></h3><ul><li>리액트가 폼 데이터를 완전히 제어</li><li>useState를 사용하여 상태 관리</li><li>실시간으로 입력값 검증 가능</li></ul><h3 id="비제어-컴포넌트-Uncontrolled-Component"><a href="#비제어-컴포넌트-Uncontrolled-Component" class="headerlink" title="비제어 컴포넌트 (Uncontrolled Component)"></a><strong>비제어 컴포넌트 (Uncontrolled Component)</strong></h3><ul><li>DOM이 폼 데이터를 처리</li><li>useRef를 사용하여 DOM에 직접 접근</li><li>필요할 때만 값을 참조</li></ul><p>저는 다음과 같은 3가지 이유로 useState를 선택하여 구현하였습니다.</p><h3 id="1-상태의-본질"><a href="#1-상태의-본질" class="headerlink" title="1. 상태의 본질"></a>1. 상태의 본질</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">LoginForm</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> email = <span class="title function_">useAuthInput</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;email&#x27;</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> password = <span class="title function_">useAuthInput</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;password&#x27;</span> &#125;);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>입력값은 시간에 따라 변화하는 애플리케이션의 상태</li><li>UI에 즉시 반영되어야 하는 데이터</li><li>상태 변화에 따른 부수 효과(유효성 검증) 필요</li></ul><h3 id="2-실시간-유효성-검증"><a href="#2-실시간-유효성-검증" class="headerlink" title="2. 실시간 유효성 검증"></a>2. 실시간 유효성 검증</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> validate = (&#123; name, value, password &#125;: <span class="title class_">ValidateOptions</span>): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;email&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="variable constant_">REGEX</span>.<span class="property">email</span>.<span class="title function_">test</span>(value);</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>사용자 경험 향상을 위한 즉각적인 피드백 필요</li><li>상태 변화를 감지하여 자동으로 검증 수행</li></ul><h3 id="3-제어-컴포넌트의-이점"><a href="#3-제어-컴포넌트의-이점" class="headerlink" title="3. 제어 컴포넌트의 이점"></a>3. 제어 컴포넌트의 이점</h3><ul><li>폼 데이터에 대한 완벽한 제어 가능</li><li>입력값 포맷팅이나 제한 용이</li><li>여러 입력 필드 간의 연동 용이</li></ul><h2 id="▫︎-로직을-분리하여-기능-구현"><a href="#▫︎-로직을-분리하여-기능-구현" class="headerlink" title="▫︎ 로직을 분리하여 기능 구현"></a>▫︎ 로직을 분리하여 기능 구현</h2><p>코드의 재사용성과 유지보수성을 높이기 위해 다음과 같이 구조를 분리했습니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// hooks/useAuthInput.ts</span></span><br><span class="line"><span class="comment">// 상태 관리와 이벤트 핸들링을 위한 커스텀 훅</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useAuthInput</span> = (<span class="params">&#123; name, password &#125;: Props</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = <span class="title function_">useState</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> [isValid, setIsValid] = useState&lt;<span class="built_in">boolean</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> debouncedValidate = <span class="title function_">useMemo</span>(</span><br><span class="line">    <span class="function">() =&gt;</span></span><br><span class="line">      <span class="title function_">debounce</span>(<span class="function">(<span class="params">newValue: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!newValue) &#123;</span><br><span class="line">          <span class="title function_">setIsValid</span>(<span class="literal">null</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> validationResult = <span class="title function_">validate</span>(&#123; name, <span class="attr">value</span>: newValue, password &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="title function_">setIsValid</span>(validationResult);</span><br><span class="line">      &#125;, <span class="number">250</span>),</span><br><span class="line">    [name, password]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> handleChange = <span class="title function_">useCallback</span>(</span><br><span class="line">    <span class="function">(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> newValue = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line"></span><br><span class="line">      <span class="title function_">setValue</span>(newValue);</span><br><span class="line">      <span class="title function_">debouncedValidate</span>(newValue);</span><br><span class="line">    &#125;,</span><br><span class="line">    [debouncedValidate]</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      debouncedValidate.<span class="title function_">cancel</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;, [debouncedValidate]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    value,</span><br><span class="line">    isValid,</span><br><span class="line">    setValue,</span><br><span class="line">    setIsValid,</span><br><span class="line">    handleChange,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils/validateAuthInput.ts</span></span><br><span class="line"><span class="comment">// 유효성 검증 로직</span></span><br><span class="line"><span class="keyword">const</span> validate = (&#123; name, value, password &#125;: <span class="title class_">ValidateOptions</span>): <span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;email&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="variable constant_">REGEX</span>.<span class="property">email</span>.<span class="title function_">test</span>(value);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;password&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="variable constant_">REGEX</span>.<span class="property">password</span>.<span class="title function_">test</span>(value);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;passwordConfirm&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> password ? value === password : <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;currentPassword&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="variable constant_">REGEX</span>.<span class="property">currentPassword</span>.<span class="title function_">test</span>(value);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;newPassword&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="variable constant_">REGEX</span>.<span class="property">newPassword</span>.<span class="title function_">test</span>(value);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;name&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="variable constant_">REGEX</span>.<span class="property">name</span>.<span class="title function_">test</span>(value);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;nickname&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="variable constant_">REGEX</span>.<span class="property">nickname</span>.<span class="title function_">test</span>(value);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;contact&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="variable constant_">REGEX</span>.<span class="property">contact</span>.<span class="title function_">test</span>(value);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;birthDate&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="variable constant_">REGEX</span>.<span class="property">birthDate</span>.<span class="title function_">test</span>(value);</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;verifyNumber&quot;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="variable constant_">REGEX</span>.<span class="property">verifyNumber</span>.<span class="title function_">test</span>(value);</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// components/auth/form/loginForm.tsx</span></span><br><span class="line"><span class="comment">// UI 컴포넌트</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">LoginForm</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> email = <span class="title function_">useAuthInput</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;email&quot;</span> &#125;);</span><br><span class="line">  <span class="keyword">const</span> password = <span class="title function_">useAuthInput</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;password&quot;</span> &#125;);</span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">mutate</span>: login, <span class="attr">isPending</span>: isLoggingIn &#125; = <span class="title function_">useLogin</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleLogin</span> = (<span class="params">e: React.FormEvent&lt;HTMLFormElement&gt;</span>) =&gt; &#123;</span><br><span class="line">    e.<span class="title function_">preventDefault</span>();</span><br><span class="line"></span><br><span class="line">    <span class="title function_">login</span>(&#123;</span><br><span class="line">      <span class="attr">email</span>: email.<span class="property">value</span>,</span><br><span class="line">      <span class="attr">password</span>: password.<span class="property">value</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">className</span>=<span class="string">&quot;mb-4 w-full&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;handleLogin&#125;</span> <span class="attr">data-testid</span>=<span class="string">&quot;login-form&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">AuthText</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;email&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">name</span>=<span class="string">&quot;email&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">size</span>=<span class="string">&quot;full&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;email.value&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">isValid</span>=<span class="string">&#123;email.isValid&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;email.handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">AuthPassword</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">name</span>=<span class="string">&quot;password&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">value</span>=<span class="string">&#123;password.value&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">isValid</span>=<span class="string">&#123;password.isValid&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onChange</span>=<span class="string">&#123;password.handleChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">label</span>=<span class="string">&quot;로그인&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">size</span>=<span class="string">&quot;full&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&quot;mt-[180px] hover:bg-primary-normal&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">disabled</span>=<span class="string">&#123;!email.isValid</span> || !<span class="attr">password.isValid</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">showSpinner</span>=<span class="string">&#123;isLoggingIn&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이러한 구조는 각 부분의 책임이 명확하다는 점, 테스트가 용이하다는 점, 코드의 재사용성이 향상된다는 장점이 있습니다.</p><h1 id="▪︎-상태-공존과-리렌더링-최적화"><a href="#▪︎-상태-공존과-리렌더링-최적화" class="headerlink" title="▪︎ 상태 공존과 리렌더링 최적화"></a>▪︎ <strong>상태 공존과 리렌더링 최적화</strong></h1><h2 id="▫︎-상태-공존-State-Colocation"><a href="#▫︎-상태-공존-State-Colocation" class="headerlink" title="▫︎ 상태 공존 (State Colocation)"></a>▫︎ 상태 공존 (State Colocation)</h2><p>상태 공존이란 하나의 컴포넌트 내에서 여러 개의 독립적인 상태가 함께 존재하는 상황을 말합니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">LoginForm</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> email = <span class="title function_">useAuthInput</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;email&quot;</span> &#125;); <span class="comment">// 상태 1</span></span><br><span class="line">  <span class="keyword">const</span> password = <span class="title function_">useAuthInput</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;password&quot;</span> &#125;); <span class="comment">// 상태 2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">AuthText</span> &#123;<span class="attr">...email</span>&#125; /&gt;</span> // 이메일 입력 시 패스워드도 리렌더링</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">AuthPassword</span> &#123;<span class="attr">...password</span>&#125; /&gt;</span> // 패스워드 입력 시 이메일도 리렌더링</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>상태 공존으로 인해 한 입력 필드의 상태 변화가 다른 필드의 불필요한 리렌더링을 유발한다는 문제점이 있었습니다. 이것은 성능 저하로 이어지고 결국 사용자 경험을 저하시키는 결과를 낳을 수 있었습니다.</p><p>이를 위해 메모이제이션 기능을 이용한 최적화 전략을 사용하기로 했습니다.</p><h2 id="▫︎-memoization을-통한-최적화"><a href="#▫︎-memoization을-통한-최적화" class="headerlink" title="▫︎ memoization을 통한 최적화"></a>▫︎ memoization을 통한 최적화</h2><h3 id="React-memo를-통한-컴포넌트-메모이제이션"><a href="#React-memo를-통한-컴포넌트-메모이제이션" class="headerlink" title="React.memo를 통한 컴포넌트 메모이제이션"></a>React.memo를 통한 컴포넌트 메모이제이션</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">AuthText</span> = <span class="title function_">memo</span>(</span><br><span class="line">  <span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="keyword">type</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    name,</span></span></span><br><span class="line"><span class="params"><span class="function">    value,</span></span></span><br><span class="line"><span class="params"><span class="function">    isValid,</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;: <span class="comment">// ...</span></span></span></span><br><span class="line"><span class="params"><span class="function">  Props</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>props가 변경되지 않은 컴포넌트의 리렌더링 방지</li><li>각 입력 필드가 독립적으로 렌더링</li></ul><h3 id="useCallback을-통한-이벤트-핸들러-메모이제이션"><a href="#useCallback을-통한-이벤트-핸들러-메모이제이션" class="headerlink" title="useCallback을 통한 이벤트 핸들러 메모이제이션"></a>useCallback을 통한 이벤트 핸들러 메모이제이션</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleChange = <span class="title function_">useCallback</span>(</span><br><span class="line">  <span class="function">(<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> newValue = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">    <span class="title function_">setValue</span>(newValue);</span><br><span class="line">    <span class="title function_">debouncedValidate</span>(newValue);</span><br><span class="line">  &#125;,</span><br><span class="line">  [debouncedValidate]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>매 렌더링마다 새로운 함수가 생성되는 것을 방지</li><li>의존성 배열에 debouncedValidate만 포함하여 불필요한 재생성 방지</li></ul><h3 id="useMemo를-통한-검증-함수-메모이제이션"><a href="#useMemo를-통한-검증-함수-메모이제이션" class="headerlink" title="useMemo를 통한 검증 함수 메모이제이션"></a>useMemo를 통한 검증 함수 메모이제이션</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debouncedValidate = <span class="title function_">useMemo</span>(</span><br><span class="line">  <span class="function">() =&gt;</span></span><br><span class="line">    <span class="title function_">debounce</span>(<span class="function">(<span class="params">newValue: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!newValue) &#123;</span><br><span class="line">        <span class="title function_">setIsValid</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> validationResult = <span class="title function_">validate</span>(&#123; name, <span class="attr">value</span>: newValue, password &#125;);</span><br><span class="line">      <span class="title function_">setIsValid</span>(validationResult);</span><br><span class="line">    &#125;, <span class="number">250</span>),</span><br><span class="line">  [name, password]</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>고비용 연산인 debounce 함수의 재생성 방지</li><li>의존성이 변경될 때만 새로운 함수 생성</li></ul><h1 id="▪︎-결과"><a href="#▪︎-결과" class="headerlink" title="▪︎ 결과"></a>▪︎ 결과</h1><p>이러한 최적화 전략들을 적용한 결과 다음과 같은 점들이 개선되었습니다.</p><h3 id="1-성능-향상"><a href="#1-성능-향상" class="headerlink" title="1. 성능 향상"></a>1. 성능 향상</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[리렌더링 패턴]</span><br><span class="line">최적화 전: Input1 변경 → 모든 Input 리렌더링</span><br><span class="line">최적화 후: Input1 변경 → Input1만 리렌더링</span><br></pre></td></tr></table></figure><h3 id="2-메모리-사용-개선"><a href="#2-메모리-사용-개선" class="headerlink" title="2. 메모리 사용 개선"></a>2. 메모리 사용 개선</h3><ul><li>불필요한 함수 생성 감소</li><li>효율적인 메모리 관리</li></ul><h3 id="3-사용자-경험-개선"><a href="#3-사용자-경험-개선" class="headerlink" title="3. 사용자 경험 개선"></a>3. 사용자 경험 개선</h3><ul><li>입력 지연 감소</li><li>부드러운 UI 업데이트</li></ul>]]></content:encoded>
      
      
      <category domain="https://NamgungJongMin.github.io/categories/Project/">Project</category>
      
      
      <category domain="https://NamgungJongMin.github.io/tags/WEGO/">WEGO</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/">프로젝트</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/custom-hook/">custom hook</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EB%A9%94%EB%AA%A8%EC%9D%B4%EC%A0%9C%EC%9D%B4%EC%85%98/">메모이제이션</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EB%A1%9C%EA%B7%B8%EC%9D%B8/">로그인</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EB%A6%AC%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%B5%9C%EC%A0%81%ED%99%94/">리렌더링 최적화</category>
      
      
      <comments>https://namgungjongmin.github.io/2025/01/17/project/wego/%EC%9D%B8%EC%A6%9D%ED%8F%BC%EA%B5%AC%ED%98%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>WEGO ) input validate 함수에 debounce를 적용하여 리소스 낭비 방지하기</title>
      <link>https://namgungjongmin.github.io/2025/01/15/project/wego/debounce/</link>
      <guid>https://namgungjongmin.github.io/2025/01/15/project/wego/debounce/</guid>
      <pubDate>Wed, 15 Jan 2025 14:22:47 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/vbghdl/post/921dd816-acad-468d-b160-8e912a3d9f5f/image.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;사용자의 입력을 실시간으로</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://velog.velcdn.com/images/vbghdl/post/921dd816-acad-468d-b160-8e912a3d9f5f/image.png"></p><blockquote><p>사용자의 입력을 실시간으로 검증하는 기능을 구현할 때, 가장 먼저 고려해야 할 것은 성능과 메모리 관리입니다. 특히 이메일이나 비밀번호와 같은 입력 필드에서는 사용자가 타이핑하는 동안 지속적으로 유효성 검증이 발생하게 되는데, 이는 불필요한 연산과 메모리 사용을 초래할 수 있습니다. 이러한 문제를 해결하기 위해 debounce 기법을 활용한 최적화 방법을 소개하고자 합니다.</p></blockquote><h1 id="▪︎-Debounce를-활용한-최적화-구현"><a href="#▪︎-Debounce를-활용한-최적화-구현" class="headerlink" title="▪︎ Debounce를 활용한 최적화 구현"></a>▪︎ Debounce를 활용한 최적화 구현</h1><p>사용자가 입력 필드에 타이핑을 할 때마다 유효성 검증 함수가 실행되면 다음과 같은 문제가 발생할 수 있습니다:</p><ul><li><strong>불필요한 연산 발생</strong>: 사용자가 ‘<a href="mailto:&#101;&#x78;&#x61;&#109;&#x70;&#108;&#101;&#64;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#x6d;">&#101;&#x78;&#x61;&#109;&#x70;&#108;&#101;&#64;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#x6d;</a>‘을 입력한다고 가정했을 때, 각 글자가 입력될 때마다 이메일 유효성 검증이 실행됩니다. 즉, ‘e’, ‘ex’, ‘exa’… 와 같이 완성되지 않은 상태에서도 검증이 수행되는 것입니다.</li><li><strong>리소스 낭비</strong>: 특히 복잡한 유효성 검증 로직이나 API 호출이 포함된 경우, 불필요한 리소스 사용이 발생합니다.</li><li><strong>메모리 누수 가능성</strong>: 컴포넌트가 언마운트되었을 때 진행 중이던 검증 작업들이 적절히 정리되지 않으면 메모리 누수로 이어질 수 있습니다.</li></ul><p>이러한 문제를 해결하기 위해 lodash의 debounce 함수를 활용하여 다음과 같이 구현했습니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debouncedValidate = <span class="title function_">useMemo</span>(</span><br><span class="line">  <span class="function">() =&gt;</span></span><br><span class="line">    <span class="title function_">debounce</span>(<span class="function">(<span class="params">newValue: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 빈 값 체크는 즉시 수행</span></span><br><span class="line">      <span class="keyword">if</span> (!newValue) &#123;</span><br><span class="line">        <span class="title function_">setIsValid</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 실제 유효성 검증은 지연 수행</span></span><br><span class="line">      <span class="keyword">const</span> validationResult = <span class="title function_">validate</span>(&#123; name, <span class="attr">value</span>: newValue, password &#125;);</span><br><span class="line">      <span class="title function_">setIsValid</span>(validationResult);</span><br><span class="line">    &#125;, <span class="number">250</span>),</span><br><span class="line">  [name, password]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 메모리 누수 방지를 위한 클린업</span></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    debouncedValidate.<span class="title function_">cancel</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, [debouncedValidate]);</span><br></pre></td></tr></table></figure><h2 id="▫︎-Debounce-함수의-메모이제이션"><a href="#▫︎-Debounce-함수의-메모이제이션" class="headerlink" title="▫︎ Debounce 함수의 메모이제이션"></a>▫︎ Debounce 함수의 메모이제이션</h2><p>useMemo를 사용하여 debounce 함수를 메모이제이션한 이유는 다음과 같습니다.</p><ul><li>컴포넌트가 리렌더링될 때마다 새로운 debounce 함수가 생성되는 것을 방지합니다.</li><li>의존성 배열에 name과 password만 포함하여, 이 값들이 변경될 때만 새로운 함수가 생성되도록 합니다.</li><li>불필요한 메모리 사용을 줄이고 성능을 최적화할 수 있습니다.</li></ul><h2 id="▫︎-지연-시간의-설정"><a href="#▫︎-지연-시간의-설정" class="headerlink" title="▫︎ 지연 시간의 설정"></a>▫︎ <strong>지연 시간의 설정</strong></h2><p>250밀리초의 지연 시간을 설정한 이유는 다음과 같습니다.</p><ul><li>사용자의 타이핑 속도를 고려하여 적절한 대기 시간을 설정했습니다.</li><li>너무 짧으면 debounce의 효과가 미미하고, 너무 길면 사용자가 답답함을 느낄 수 있습니다.</li><li>실제 사용자 테스트를 통해 최적의 시간을 도출했습니다.</li></ul><h2 id="▫︎-메모리-누수-방지"><a href="#▫︎-메모리-누수-방지" class="headerlink" title="▫︎ 메모리 누수 방지"></a>▫︎ <strong>메모리 누수 방지</strong></h2><p>클린업 함수를 구현한 이유와 그 중요성.</p><ul><li>컴포넌트가 언마운트될 때 진행 중인 모든 debounce 작업을 취소합니다.</li><li>이는 메모리 누수를 방지하고 예기치 않은 상태 업데이트를 막아줍니다.</li><li>React의 Strict Mode에서도 안정적으로 동작하도록 보장합니다.</li></ul><h1 id="▪︎-최적화의-효과"><a href="#▪︎-최적화의-효과" class="headerlink" title="▪︎ 최적화의 효과"></a>▪︎ <strong>최적화의 효과</strong></h1><p>최적화 이전과 이후를 비교하기 위해 chrome dev tools의 performance 탭과 memory 탭을 활용하였습니다.</p><p><img src="https://velog.velcdn.com/images/vbghdl/post/daabc03d-a451-49ab-ba8c-b96042502093/image.png" alt="image.png"></p><h2 id="▫︎-테스트-시나리오"><a href="#▫︎-테스트-시나리오" class="headerlink" title="▫︎ 테스트 시나리오"></a>▫︎ 테스트 시나리오</h2><p>다음과 같은 상황에서 메모리 사용량을 측정했습니다.</p><ol><li>이메일 입력 필드에 지정된 문자열을 250ms 이상의 속도로 빠르게 입력</li><li>5초 동안 대기</li><li>컴포넌트 언마운트</li></ol><h2 id="▫︎-측정-결과"><a href="#▫︎-측정-결과" class="headerlink" title="▫︎ 측정 결과"></a>▫︎ 측정 결과</h2><h3 id="Debounce-적용-시"><a href="#Debounce-적용-시" class="headerlink" title="Debounce 적용 시"></a>Debounce 적용 시</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Debounce 없이 직접 검증</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">handleChange</span> = (<span class="params">e: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> newValue = e.<span class="property">target</span>.<span class="property">value</span>;</span><br><span class="line">  <span class="title function_">setValue</span>(newValue);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> validationResult = <span class="title function_">validate</span>(&#123;</span><br><span class="line">    name,</span><br><span class="line">    <span class="attr">value</span>: newValue,</span><br><span class="line">    password,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="title function_">setIsValid</span>(validationResult);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>초기 메모리: 24MB</li><li>입력 중 최대 메모리: 32MB</li><li>언마운트 후 메모리: 28MB (메모리 누수 발생)</li><li>검증 함수 호출 횟수: 16회 (“<a href="mailto:&#116;&#x65;&#x73;&#x74;&#64;&#x65;&#x78;&#97;&#x6d;&#112;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#x6d;">&#116;&#x65;&#x73;&#x74;&#64;&#x65;&#x78;&#97;&#x6d;&#112;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#x6d;</a>“ 입력 시)</li></ul><h3 id="Debounce-미-적용-시"><a href="#Debounce-미-적용-시" class="headerlink" title="Debounce 미 적용 시"></a>Debounce 미 적용 시</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> debouncedValidate = <span class="title function_">useMemo</span>(</span><br><span class="line">  <span class="function">() =&gt;</span></span><br><span class="line">    <span class="title function_">debounce</span>(<span class="function">(<span class="params">newValue: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!newValue) &#123;</span><br><span class="line">        <span class="title function_">setIsValid</span>(<span class="literal">null</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> validationResult = <span class="title function_">validate</span>(&#123; name, <span class="attr">value</span>: newValue, password &#125;);</span><br><span class="line">      <span class="title function_">setIsValid</span>(validationResult);</span><br><span class="line">    &#125;, <span class="number">250</span>),</span><br><span class="line">  [name, password]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    debouncedValidate.<span class="title function_">cancel</span>();</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;, [debouncedValidate]);</span><br></pre></td></tr></table></figure><ul><li>초기 메모리: 24MB</li><li>입력 중 최대 메모리: 27MB</li><li>언마운트 후 메모리: 24MB (초기 상태로 복귀)</li><li>검증 함수 호출 횟수: 1회 (“<a href="mailto:&#116;&#x65;&#x73;&#116;&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#109;">&#116;&#x65;&#x73;&#116;&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#109;</a>“ 입력 시)</li></ul><h3 id="메모리-패턴"><a href="#메모리-패턴" class="headerlink" title="메모리 패턴"></a>메모리 패턴</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 메모리 사용량 그래프 (시간에 따른 변화)</span><br><span class="line">/*</span><br><span class="line">Debounce 미적용:</span><br><span class="line">     32MB ┌─────┐</span><br><span class="line">     28MB │     └───────</span><br><span class="line">     24MB └─────────────</span><br><span class="line"></span><br><span class="line">Debounce 적용:</span><br><span class="line">     27MB ┌─┐</span><br><span class="line">     24MB └─└───────────</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>주요 차이점:</p><ul><li><strong>최대 메모리 사용량</strong>: Debounce를 적용했을 때 약 16% 낮은 최대 메모리 사용량을 보였습니다.</li><li><strong>메모리 해제</strong>: Debounce 적용 시 컴포넌트 언마운트 후 메모리가 완전히 해제되었습니다.</li><li><strong>메모리 변동폭</strong>: Debounce 적용 시 메모리 사용량의 변동폭이 더 작았습니다.</li></ul><h3 id="CPU-사용량"><a href="#CPU-사용량" class="headerlink" title="CPU 사용량"></a>CPU 사용량</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// CPU 사용량 비교</span><br><span class="line">/*</span><br><span class="line">Debounce 미적용:</span><br><span class="line">- 입력 중 CPU 사용: 평균 15%</span><br><span class="line">- 검증 함수 실행 시 스파이크: 최대 25%</span><br><span class="line"></span><br><span class="line">Debounce 적용:</span><br><span class="line">- 입력 중 CPU 사용: 평균 5%</span><br><span class="line">- 검증 함수 실행 시 스파이크: 최대 8%</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><h3 id="가비지-컬렉션-GC-패턴"><a href="#가비지-컬렉션-GC-패턴" class="headerlink" title="가비지 컬렉션 (GC) 패턴"></a>가비지 컬렉션 (GC) 패턴</h3><ul><li><strong>Debounce 미적용</strong>: 잦은 GC 발생 (초당 약 2-3회)</li><li><strong>Debounce 적용</strong>: GC 발생 빈도 감소 (초당 약 0.5회)</li></ul><h1 id="▪︎-최적화-의의"><a href="#▪︎-최적화-의의" class="headerlink" title="▪︎ 최적화 의의"></a>▪︎ 최적화 의의</h1><ol><li><strong>사용자 경험 개선</strong><ul><li>입력 지연 감소</li><li>브라우저 반응성 향상</li><li>배터리 사용량 감소 (모바일 환경)</li></ul></li><li><strong>서버 리소스 절약</strong><ul><li>API 호출이 포함된 검증의 경우, 서버 부하 감소</li><li>네트워크 트래픽 감소</li></ul></li><li><strong>장기적 안정성</strong><ul><li>메모리 누수 방지로 인한 안정적인 장시간 사용</li><li>예측 가능한 리소스 사용 패턴</li></ul></li></ol><p>이러한 측정 결과를 통해 Debounce 적용이 단순한 최적화를 넘어서, 애플리케이션의 전반적인 성능과 안정성 향상에 큰 영향을 미친다는 것을 확인할 수 있었습니다.</p>]]></content:encoded>
      
      
      <category domain="https://NamgungJongMin.github.io/categories/Project/">Project</category>
      
      
      <category domain="https://NamgungJongMin.github.io/tags/WEGO/">WEGO</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/">프로젝트</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/debounce/">debounce</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/lodash/">lodash</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%B5%9C%EC%A0%81%ED%99%94/">최적화</category>
      
      
      <comments>https://namgungjongmin.github.io/2025/01/15/project/wego/debounce/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>WEGO ) Zustand를 활용한 재사용 가능한 모달 시스템 구현</title>
      <link>https://namgungjongmin.github.io/2025/01/13/project/wego/modal/</link>
      <guid>https://namgungjongmin.github.io/2025/01/13/project/wego/modal/</guid>
      <pubDate>Mon, 13 Jan 2025 12:12:47 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/vbghdl/post/921dd816-acad-468d-b160-8e912a3d9f5f/image.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Next.js 프로젝트에서</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://velog.velcdn.com/images/vbghdl/post/921dd816-acad-468d-b160-8e912a3d9f5f/image.png"></p><blockquote><p>Next.js 프로젝트에서 모달을 효율적으로 관리하고 재사용 가능한 시스템을 구축하기 위해 <code>Zustand</code>를 사용하여 <strong>전역 상태 관리</strong>와 <strong>커스텀 훅을 통한 편리한 모달 호출 인터페이스</strong>를 작성하였습니다.</p></blockquote><h1 id="▪︎-주요-기능"><a href="#▪︎-주요-기능" class="headerlink" title="▪︎ 주요 기능"></a>▪︎ 주요 기능</h1><ul><li>전역 모달 상태 관리 ( Zustand )</li><li>텍스트 하이라이팅 기능</li><li>아이콘 커스터마이징</li><li>확인&#x2F;취소 버튼 커스터마이징</li><li>콜백함수 지원</li></ul><h1 id="▪︎-구현-상세"><a href="#▪︎-구현-상세" class="headerlink" title="▪︎ 구현 상세"></a>▪︎ 구현 상세</h1><h2 id="▫︎-Modal-Store"><a href="#▫︎-Modal-Store" class="headerlink" title="▫︎ Modal Store"></a>▫︎ Modal Store</h2><p>zustand를 사용하여 모달의 상태를 전역적으로 관리하였습니다. 텍스트 하이라이팅, 아이콘, 버튼 텍스트, 콜백 함수 등 다양한 커스터마이징 옵션 제공이 가능합니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useModalStore.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">TextHighlight</span> &#123;</span><br><span class="line">  <span class="attr">range</span>: &#123;</span><br><span class="line">    <span class="attr">start</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="attr">end</span>: <span class="built_in">number</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="attr">color</span>: <span class="built_in">string</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ModalState</span> &#123;</span><br><span class="line">  <span class="attr">isOpen</span>: <span class="built_in">boolean</span>;</span><br><span class="line">  icon?: <span class="title class_">ComponentType</span>;</span><br><span class="line">  <span class="attr">title</span>: <span class="built_in">string</span>;</span><br><span class="line">  titleHighlight?: <span class="title class_">TextHighlight</span>;</span><br><span class="line">  <span class="attr">message</span>: <span class="built_in">string</span>;</span><br><span class="line">  messageHighlight?: <span class="title class_">TextHighlight</span>;</span><br><span class="line">  <span class="attr">confirmText</span>: <span class="built_in">string</span>;</span><br><span class="line">  cancelText?: <span class="built_in">string</span>;</span><br><span class="line">  onConfirm?: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  onCancel?: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ModalStore</span> &#123;</span><br><span class="line">  <span class="attr">modal</span>: <span class="title class_">ModalState</span>;</span><br><span class="line">  <span class="attr">openModal</span>: <span class="function">(<span class="params">modal: Partial&lt;ModalState&gt;</span>) =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  <span class="attr">closeModal</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">initialState</span>: <span class="title class_">ModalState</span> = &#123;</span><br><span class="line">  <span class="attr">isOpen</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">message</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="attr">confirmText</span>: <span class="string">&quot;확인&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useModalStore = create&lt;<span class="title class_">ModalStore</span>&gt;(<span class="function">(<span class="params">set</span>) =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">modal</span>: initialState,</span><br><span class="line">  <span class="attr">openModal</span>: <span class="function">(<span class="params">modal</span>) =&gt;</span></span><br><span class="line">    <span class="title function_">set</span>(<span class="function">(<span class="params">state</span>) =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">modal</span>: &#123; ...state.<span class="property">modal</span>, ...modal, <span class="attr">isOpen</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    &#125;)),</span><br><span class="line">  <span class="attr">closeModal</span>: <span class="function">() =&gt;</span> <span class="title function_">set</span>(&#123; <span class="attr">modal</span>: initialState &#125;),</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; useModalStore, <span class="keyword">type</span> <span class="title class_">TextHighlight</span> &#125;;</span><br></pre></td></tr></table></figure><h2 id="▫︎-Modal-Component"><a href="#▫︎-Modal-Component" class="headerlink" title="▫︎ Modal Component"></a>▫︎ Modal Component</h2><p>실제 화면에 그려질 컴포넌트입니다. 텍스트 하이라이팅 기능에 대해 어떻게 구현할지가 최대 고민거리였습니다.</p><p><img src="https://velog.velcdn.com/images/vbghdl/post/3a26c2b9-7dc1-4073-b726-d89f1facdb66/image.png" alt="image.png"></p><p>위 이미지처럼 Title과 message 들 중 텍스트에 색상으로 하이라이트가 들어가 있는 경우가 있었습니다. 어떤 식으로 인자를 받아야 해당 부분을 구현할 수 있을까 고민하다 하이라이팅 할 텍스트의 시작점과 끝점에 대한 정보와 color 정보를 받아 구현하도록 하였습니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">HighlightedText</span> = (<span class="params">&#123; text, highlight &#125;: &#123; text: <span class="built_in">string</span>; highlight?: TextHighlight &#125;</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!highlight) <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;whitespace-pre-line&quot;</span>&gt;</span>&#123;text&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&quot;whitespace-pre-line&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;text.slice(0, highlight.range.start)&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">className</span>=<span class="string">&#123;highlight.color&#125;</span>&gt;</span>&#123;text.slice(highlight.range.start, highlight.range.end)&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;text.slice(highlight.range.end)&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>모달 컴포넌트의 코드는 다음과 같습니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Modal.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Modal</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; modal, closeModal &#125; = <span class="title function_">useModalStore</span>();</span><br><span class="line">  <span class="keyword">const</span> &#123;</span><br><span class="line">    isOpen,</span><br><span class="line">    <span class="attr">icon</span>: <span class="title class_">Icon</span>,</span><br><span class="line">    title,</span><br><span class="line">    titleHighlight,</span><br><span class="line">    message,</span><br><span class="line">    messageHighlight,</span><br><span class="line">    confirmText = <span class="string">&quot;확인&quot;</span>,</span><br><span class="line">    cancelText = <span class="string">&quot;취소&quot;</span>,</span><br><span class="line">    onConfirm,</span><br><span class="line">    onCancel,</span><br><span class="line">  &#125; = modal;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleConfirm</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (onConfirm) <span class="title function_">onConfirm</span>();</span><br><span class="line">    <span class="title function_">closeModal</span>();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleCancel</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (onCancel) <span class="title function_">onCancel</span>();</span><br><span class="line">    <span class="title function_">closeModal</span>();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!isOpen) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;fixed inset-0 z-50 flex animate-fade-in items-center justify-center bg-black/40 pb-[80px]&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;min-w-[298px] animate-slide-up rounded-lg bg-white p-8 md:min-w-[380px]&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;Icon &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;mb-4 flex justify-center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;bg-primary-light flex h-16 w-16 items-center justify-center rounded-full&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Icon</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;text-center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">h2</span> <span class="attr">className</span>=<span class="string">&quot;title-5-b&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">HighlightedText</span> <span class="attr">text</span>=<span class="string">&#123;title&#125;</span> <span class="attr">highlight</span>=<span class="string">&#123;titleHighlight&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">className</span>=<span class="string">&quot;text-body-2-r mt-2 whitespace-pre-line text-label-neutral&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">HighlightedText</span> <span class="attr">text</span>=<span class="string">&#123;message&#125;</span> <span class="attr">highlight</span>=<span class="string">&#123;messageHighlight&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;mt-6 flex w-full justify-center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;onCancel ? (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;flex w-[250px] gap-2&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">label</span>=<span class="string">&#123;cancelText&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">size</span>=<span class="string">&quot;full&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">handler</span>=<span class="string">&#123;handleCancel&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">fill</span>=<span class="string">&quot;white&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">className</span>=<span class="string">&quot;h-[38px] w-[120px]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              /&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Button</span> <span class="attr">label</span>=<span class="string">&#123;confirmText&#125;</span> <span class="attr">size</span>=<span class="string">&quot;full&quot;</span> <span class="attr">handler</span>=<span class="string">&#123;handleConfirm&#125;</span> <span class="attr">className</span>=<span class="string">&quot;h-[38px] w-[120px]&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          ) : (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">label</span>=<span class="string">&#123;confirmText&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">size</span>=<span class="string">&quot;addon&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">handler</span>=<span class="string">&#123;handleConfirm&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">className</span>=<span class="string">&quot;h-[38px] w-[120px] md:w-[210px]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            /&gt;</span></span></span><br><span class="line"><span class="language-xml">          )&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Modal</span>;</span><br></pre></td></tr></table></figure><h2 id="▫︎-Modal-Custom-Hook"><a href="#▫︎-Modal-Custom-Hook" class="headerlink" title="▫︎ Modal Custom Hook"></a>▫︎ Modal Custom Hook</h2><p>간편한 모달 호출을 위해서 인터페이스를 제공하기 위해 커스텀 훅을 작성해주었습니다. 이제는 어디서든 이 커스텀 훅을 필요한 정보와 함께 호출하면 모달 사용이 가능해집니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ModalOptions</span> &#123;</span><br><span class="line">  icon?: <span class="title class_">ComponentType</span>&lt;<span class="title class_">SVGProps</span>&lt;<span class="title class_">SVGElement</span>&gt;&gt;;</span><br><span class="line">  titleHighlight?: <span class="title class_">TextHighlight</span>;</span><br><span class="line">  messageHighlight?: <span class="title class_">TextHighlight</span>;</span><br><span class="line">  confirmText?: <span class="built_in">string</span>;</span><br><span class="line">  cancelText?: <span class="built_in">string</span>;</span><br><span class="line">  onConfirm?: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">  onCancel?: <span class="function">() =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useModal</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; openModal, closeModal &#125; = <span class="title function_">useModalStore</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">showModal</span> = (<span class="params">title: <span class="built_in">string</span>, message: <span class="built_in">string</span>, options?: ModalOptions</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">openModal</span>(&#123;</span><br><span class="line">      title,</span><br><span class="line">      message,</span><br><span class="line">      ...options,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    showModal,</span><br><span class="line">    closeModal,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useModal;</span><br></pre></td></tr></table></figure><h1 id="▪︎-사용-예시"><a href="#▪︎-사용-예시" class="headerlink" title="▪︎ 사용 예시"></a>▪︎ 사용 예시</h1><p>프로젝트 내 동일한 형식의 모달이 필요한 곳에서는 모달 커스텀 훅을 호출하여 편리하게 사용이 가능했습니다. 예시 코드는 TanstackQuery의 useMutation 훅으로 작성된 회원가입 api 가 성공했을 시, 모달이 보여지게 동작합니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// useSignup.ts</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">useSignup</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> router = <span class="title function_">useRouter</span>();</span><br><span class="line">  <span class="keyword">const</span> &#123; showModal &#125; = <span class="title function_">useModal</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">useMutation</span>(&#123;</span><br><span class="line">    <span class="attr">mutationFn</span>: signup,</span><br><span class="line">    <span class="attr">onError</span>: <span class="function">(<span class="params">error: QueryError</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> (error.<span class="property">status</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">500</span>:</span><br><span class="line">          <span class="title function_">showModal</span>(<span class="string">&quot;네트워크를 확인해주세요.&quot;</span>, <span class="string">&quot;회원가입에 실패했습니다.&quot;</span>, &#123;</span><br><span class="line">            <span class="attr">icon</span>: <span class="title class_">ModalErrorIcon</span>,</span><br><span class="line">            <span class="attr">confirmText</span>: <span class="string">&quot;돌아가기&quot;</span>,</span><br><span class="line">            <span class="attr">messageHighlight</span>: &#123;</span><br><span class="line">              <span class="attr">range</span>: &#123; <span class="attr">start</span>: <span class="number">6</span>, <span class="attr">end</span>: <span class="number">8</span> &#125;,</span><br><span class="line">              <span class="attr">color</span>: <span class="string">&quot;text-status-error&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onConfirm</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">              router.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;);</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">400</span>:</span><br><span class="line">          <span class="comment">// 400 에러 핸들링</span></span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">        <span class="comment">// default 에러 핸들링</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onSuccess</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">showModal</span>(<span class="string">&quot;축하해요! WE&#x27;GO의\n회원가입이 완료 되었습니다.&quot;</span>, <span class="string">&quot;이제 함께 떠나는 여행을 시작해요.&quot;</span>, &#123;</span><br><span class="line">        <span class="attr">icon</span>: <span class="title class_">ModalSuccessIcon</span>,</span><br><span class="line">        <span class="attr">confirmText</span>: <span class="string">&quot;확인&quot;</span>,</span><br><span class="line">        <span class="attr">titleHighlight</span>: &#123;</span><br><span class="line">          <span class="attr">range</span>: &#123; <span class="attr">start</span>: <span class="number">19</span>, <span class="attr">end</span>: <span class="number">21</span> &#125;,</span><br><span class="line">          <span class="attr">color</span>: <span class="string">&quot;text-primary-normal&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">onConfirm</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">          router.<span class="title function_">push</span>(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="▪︎-구현-방식의-장점"><a href="#▪︎-구현-방식의-장점" class="headerlink" title="▪︎ 구현 방식의 장점"></a>▪︎ 구현 방식의 장점</h1><h3 id="1-재사용성"><a href="#1-재사용성" class="headerlink" title="1. 재사용성"></a>1. 재사용성</h3><p>프로젝트 전체에서 일관된 모달 UI&#x2F;UX 제공</p><h3 id="2-타입-안정성"><a href="#2-타입-안정성" class="headerlink" title="2. 타입 안정성"></a>2. 타입 안정성</h3><p><code>TypeScript</code>를 활용한 완벽한 타입 지원</p><h3 id="3-커스터마이징"><a href="#3-커스터마이징" class="headerlink" title="3. 커스터마이징"></a>3. 커스터마이징</h3><p>다양한 옵션으로 상황에 맞는 모달 구성 가능</p><h3 id="4-사용-편의성"><a href="#4-사용-편의성" class="headerlink" title="4. 사용 편의성"></a>4. 사용 편의성</h3><p>간단한 인터페이스로 복잡한 모달 구현 가능</p><h1 id="▪︎-마치며"><a href="#▪︎-마치며" class="headerlink" title="▪︎ 마치며"></a>▪︎ 마치며</h1><p><code>Zustand</code>와 <code>Custom Hook</code>을 활용하여 재사용 가능하고 타입 안전한 모달 시스템을 구축했습니다. 이를 통해 프로젝트의 일관성을 유지하면서도 다양한 상황에 대응할 수 있는 유연한 모달 구현이 가능했습니다.</p>]]></content:encoded>
      
      
      <category domain="https://NamgungJongMin.github.io/categories/Project/">Project</category>
      
      
      <category domain="https://NamgungJongMin.github.io/tags/WEGO/">WEGO</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/">프로젝트</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EB%AA%A8%EB%8B%AC/">모달</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/zustand/">zustand</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/custom-hook/">custom hook</category>
      
      
      <comments>https://namgungjongmin.github.io/2025/01/13/project/wego/modal/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>WEGO ) Tailwind CSS로 확장성과 재사용성을 고려한 공통 컴포넌트 설계하기</title>
      <link>https://namgungjongmin.github.io/2025/01/11/project/wego/cn/</link>
      <guid>https://namgungjongmin.github.io/2025/01/11/project/wego/cn/</guid>
      <pubDate>Sat, 11 Jan 2025 08:32:17 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/vbghdl/post/921dd816-acad-468d-b160-8e912a3d9f5f/image.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;프로젝트를 진행하면서 버튼</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://velog.velcdn.com/images/vbghdl/post/921dd816-acad-468d-b160-8e912a3d9f5f/image.png"></p><blockquote><p>프로젝트를 진행하면서 버튼 컴포넌트와 같은 공통 컴포넌트를 설계할 때, 확장성과 재사용성을 최우선으로 고려했습니다. 이를 위해 cva, clsx, tailwind-merge라는 세 가지 라이브러리를 조합하여 사용했는데요, 이번 글에서는 각 라이브러리의 특징과 이들을 조합했을 때의 시너지에 대해 공유하고자 합니다.</p></blockquote><h1 id="▪︎-각-라이브러리의-특징과-역할"><a href="#▪︎-각-라이브러리의-특징과-역할" class="headerlink" title="▪︎ 각 라이브러리의 특징과 역할"></a>▪︎ 각 <strong>라이브러리의 특징과 역할</strong></h1><h2 id="▫︎-CVA-Class-Variance-Authority"><a href="#▫︎-CVA-Class-Variance-Authority" class="headerlink" title="▫︎ CVA (Class Variance Authority)"></a>▫︎ <strong>CVA (Class Variance Authority)</strong></h2><p>Class Variance Authority(CVA)는 컴포넌트의 다양한 스타일 변형(variants)을 타입 안전하게 관리할 수 있게 해주는 라이브러리입니다. 특히 Tailwind CSS와 함께 사용할 때 그 진가를 발휘하는데, 이는 미리 정의된 스타일 조합을 타입 시스템의 보호 아래 안전하게 사용할 수 있게 해줍니다.</p><p>우리 프로젝트의 버튼 컴포넌트에는 다음과 같이 variants를 정의해 사용하였습니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ButtonVariants</span> = <span class="title function_">cva</span>(</span><br><span class="line">  <span class="comment">// 기본 스타일</span></span><br><span class="line">  <span class="string">&quot;body-1-m rounded disabled:border disabled:border-line-normal disabled:bg-background-alternative disabled:text-label-alternative flex items-center justify-center&quot;</span>,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">variants</span>: &#123;</span><br><span class="line">      <span class="attr">fill</span>: &#123;</span><br><span class="line">        <span class="attr">default</span>: <span class="string">&quot;bg-label-normal text-white&quot;</span>,</span><br><span class="line">        <span class="attr">white</span>: <span class="string">&quot;bg-white border border-line-strong text-line-strong&quot;</span>,</span><br><span class="line">        <span class="attr">blue</span>: <span class="string">&quot;bg-primary-normal text-white hover:text-primary-normal hover:bg-blue-100&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">size</span>: &#123;</span><br><span class="line">        <span class="attr">default</span>: <span class="string">&quot;w-[335px] h-[52px]&quot;</span>,</span><br><span class="line">        <span class="attr">full</span>: <span class="string">&quot;w-full h-[52px]&quot;</span>,</span><br><span class="line">        <span class="comment">// ... 기타 사이즈 variants</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// ... 기타 variant 그룹들</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">defaultVariants</span>: &#123;</span><br><span class="line">      <span class="attr">fill</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">      <span class="attr">size</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">      <span class="attr">font</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>이러한 CVA의 사용은 다음과 같은 구체적인 이점을 제공합니다.</p><ol><li><strong>타입 안전성</strong>: TypeScript와 완벽하게 통합되어, 정의되지 않은 variant 조합을 사용하려 할 때 컴파일 단계에서 오류를 발견할 수 있습니다. 예를 들어, fill&#x3D;”invalid”와 같은 잘못된 값을 사용하려 하면 즉시 TypeScript 에러가 발생합니다.</li><li><strong>중앙 집중화된 스타일 관리</strong>: 모든 스타일 variant를 한 파일에서 관리함으로써, 디자인 시스템의 일관성을 유지하기가 훨씬 쉬워집니다. 스타일 수정이 필요할 때도 한 곳만 수정하면 되므로 유지보수가 용이합니다.</li><li><strong>자동 완성 지원</strong>: IDE에서 사용 가능한 variant 옵션들을 자동으로 제안받을 수 있어, 개발 생산성이 크게 향상됩니다.</li></ol><h2 id="▫︎-CLSX"><a href="#▫︎-CLSX" class="headerlink" title="▫︎ CLSX"></a>▫︎ <strong>CLSX</strong></h2><p>CLSX는 조건부 클래스명을 처리하기 위한 유틸리티 라이브러리입니다. 특히 React 컴포넌트에서 동적인 클래스명을 다룰 때 매우 유용합니다. 이 라이브러리는 다양한 형태의 입력을 처리할 수 있으며, 최종적으로 유효한 클래스명 문자열을 생성해줍니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; clsx, <span class="title class_">ClassValue</span> &#125; <span class="keyword">from</span> <span class="string">&quot;clsx&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// clsx 사용 예시</span></span><br><span class="line"><span class="keyword">const</span> className = <span class="title function_">clsx</span>(<span class="string">&quot;base-class&quot;</span>, isActive &amp;&amp; <span class="string">&quot;active&quot;</span>, &#123; <span class="string">&quot;is-disabled&quot;</span>: isDisabled &#125;, [</span><br><span class="line">  <span class="string">&quot;additional-class-1&quot;</span>,</span><br><span class="line">  <span class="string">&quot;additional-class-2&quot;</span>,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><p>CLSX는 다음과 같은 강력한 기능들을 제공합니다.</p><ol><li><strong>다양한 입력 형식 지원</strong>: 문자열, 객체, 배열 등 어떤 형태로든 클래스명을 전달할 수 있습니다. 이는 다양한 상황에서 유연하게 클래스를 조합할 수 있게 해줍니다.</li><li><strong>자동 정리</strong>: falsy 값(undefined, null, false 등)을 자동으로 필터링하여 깨끗한 클래스명 문자열을 생성합니다.</li><li><strong>직관적인 문법</strong>: 복잡한 조건부 클래스 로직도 읽기 쉽고 이해하기 쉬운 형태로 작성할 수 있습니다.</li></ol><h2 id="▫︎-Tailwind-Merge"><a href="#▫︎-Tailwind-Merge" class="headerlink" title="▫︎ Tailwind Merge"></a>▫︎ <strong>Tailwind Merge</strong></h2><p>Tailwind Merge는 Tailwind CSS를 사용할 때 발생할 수 있는 클래스 충돌 문제를 우아하게 해결해주는 라이브러리입니다. 특히 재사용 가능한 컴포넌트를 만들 때 매우 유용한데, 이는 기본 스타일과 커스텀 스타일이 충돌할 때 가장 마지막에 선언된 스타일을 우선적으로 적용하는 방식으로 동작합니다.</p><p>Tailwind Merge를 통해 해결할 수 있는 실제 문제 상황을 예시로 살펴보겠습니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Tailwind Merge 없이 사용할 경우</span></span><br><span class="line">&lt;button className=<span class="string">&quot;px-4 py-2 text-sm text-blue-500 px-6&quot;</span>&gt;</span><br><span class="line">  <span class="comment">// px-4와 px-6이 충돌, 브라우저 CSS 규칙에 따라 먼저 선언된 px-4가 적용됨</span></span><br><span class="line">&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tailwind Merge 사용</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#123;twMerge(</span>&quot;<span class="attr">px-4</span> <span class="attr">py-2</span> <span class="attr">text-sm</span> <span class="attr">text-blue-500</span>&quot;, &quot;<span class="attr">px-6</span>&quot;)&#125;&gt;</span></span></span><br><span class="line"><span class="language-xml">  // 의도한 대로 px-6이 적용됨</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>Tailwind Merge는 다음과 같은 핵심적인 문제들을 해결합니다.</p><ol><li><strong>충돌 해결</strong>: 같은 속성을 가진 클래스들이 충돌할 때, 가장 마지막에 선언된 클래스를 우선적으로 적용합니다. 이는 CSS의 일반적인 캐스케이딩 규칙과도 일치하는 직관적인 동작입니다.</li><li><strong>최적화</strong>: 중복되거나 불필요한 클래스들을 자동으로 제거하여 최종적으로 깔끔한 클래스 문자열을 생성합니다.</li><li><strong>모든 Tailwind 규칙 지원</strong>: Tailwind CSS의 모든 유틸리티 클래스와 변형자(modifiers)를 완벽하게 이해하고 처리할 수 있습니다.</li></ol><h1 id="▪︎-세-라이브러리를-조합한-유틸함수-활용"><a href="#▪︎-세-라이브러리를-조합한-유틸함수-활용" class="headerlink" title="▪︎ 세 라이브러리를 조합한 유틸함수 활용"></a>▪︎ 세 라이브러리를 조합한 유틸함수 활용</h1><p>이 세 라이브러리를 조합하여 사용할 때 발생하는 시너지는 매우 강력합니다. 각각의 라이브러리가 가진 장점들이 서로를 보완하면서, 더욱 강력하고 유지보수하기 쉬운 컴포넌트 시스템을 구축할 수 있게 됩니다.</p><p>우리 프로젝트에 적용하기 위해 세 라이브러리를 조합한 유틸함수인 cn을 작성하였습니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cn.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; twMerge &#125; <span class="keyword">from</span> <span class="string">&quot;tailwind-merge&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; clsx, <span class="title class_">ClassValue</span> &#125; <span class="keyword">from</span> <span class="string">&quot;clsx&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">cn</span> = (<span class="params">...inputs: ClassValue[]</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">twMerge</span>(<span class="title function_">clsx</span>(inputs));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="title class_">Button</span>.<span class="property">tsx</span> (유틸 함수 활용한 공통 컴포넌트)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Button</span> = forwardRef&lt;<span class="title class_">HTMLButtonElement</span>, <span class="title class_">Props</span>&gt;(</span><br><span class="line">  <span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    fill,</span></span></span><br><span class="line"><span class="params"><span class="function">    size,</span></span></span><br><span class="line"><span class="params"><span class="function">    font,</span></span></span><br><span class="line"><span class="params"><span class="function">    hover,</span></span></span><br><span class="line"><span class="params"><span class="function">    hoverBorder,</span></span></span><br><span class="line"><span class="params"><span class="function">    className,</span></span></span><br><span class="line"><span class="params"><span class="function">    classNameCondition,</span></span></span><br><span class="line"><span class="params"><span class="function">    ...props</span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;, ref</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&#123;cn(</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">ButtonVariants</span>(&#123; <span class="attr">fill</span>, <span class="attr">size</span>, <span class="attr">font</span>, <span class="attr">hover</span>, <span class="attr">hoverBorder</span> &#125;),</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">className</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">classNameCondition</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        )&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#123;<span class="attr">...props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* 버튼 내용 */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="1-개발-경험-향상"><a href="#1-개발-경험-향상" class="headerlink" title="1. 개발 경험 향상"></a><strong>1. 개발 경험 향상</strong></h3><ul><li><strong>타입 안전성</strong>: CVA를 통해 정의된 variants는 TypeScript의 타입 검사를 받게 되어, 잘못된 prop 사용을 방지할 수 있습니다.</li><li><strong>자동 완성</strong>: IDE에서 사용 가능한 모든 variant 옵션들을 자동으로 제안받을 수 있어 개발 속도가 향상됩니다.</li><li><strong>디버깅 용이성</strong>: 스타일 관련 문제가 발생했을 때, 문제의 원인을 쉽게 추적할 수 있습니다.</li></ul><h3 id="2-유지보수성-개선"><a href="#2-유지보수성-개선" class="headerlink" title="2. 유지보수성 개선"></a><strong>2. 유지보수성 개선</strong></h3><ul><li><strong>중앙 집중화된 스타일 관리</strong>: 모든 기본 스타일 변형이 한 곳에서 관리되어 일관성 유지가 쉽습니다.</li><li><strong>변경 용이성</strong>: 디자인 시스템의 변경이 필요할 때, variants 정의만 수정하면 되므로 변경 사항을 쉽게 적용할 수 있습니다.</li><li><strong>코드 재사용</strong>: 잘 정의된 variant 시스템으로 인해 동일한 스타일을 여러 곳에서 일관되게 사용할 수 있습니다.</li></ul><h3 id="3-확장성-확보"><a href="#3-확장성-확보" class="headerlink" title="3. 확장성 확보"></a><strong>3. 확장성 확보</strong></h3><ul><li><strong>커스텀 스타일링</strong>: className prop을 통해 기본 스타일을 확장하거나 재정의할 수 있습니다.</li><li><strong>조건부 스타일링</strong>: classNameCondition을 통해 특정 조건에 따른 스타일 적용이 가능합니다.</li><li><strong>새로운 변형 추가</strong>: 새로운 디자인 요구사항이 생겼을 때 variants에 쉽게 추가할 수 있습니다.</li></ul><h1 id="▪︎-컴포넌트-사용-예시"><a href="#▪︎-컴포넌트-사용-예시" class="headerlink" title="▪︎ 컴포넌트 사용 예시"></a>▪︎ 컴포넌트 사용 예시</h1><h2 id="▫︎-기본적인-사용-패턴"><a href="#▫︎-기본적인-사용-패턴" class="headerlink" title="▫︎ 기본적인 사용 패턴"></a>▫︎ 기본적인 사용 패턴</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 기본 버튼</span></span><br><span class="line">&lt;<span class="title class_">Button</span></span><br><span class="line">  fill=<span class="string">&quot;default&quot;</span></span><br><span class="line">  size=<span class="string">&quot;full&quot;</span></span><br><span class="line">  label=<span class="string">&quot;로그인&quot;</span></span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 모달 내 버튼</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;white&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">size</span>=<span class="string">&quot;modal&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">label</span>=<span class="string">&quot;취소&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br></pre></td></tr></table></figure><p>이러한 기본 사용에서는 미리 정의된 variants를 통해 일관된 디자인을 유지하면서도, 각 상황에 맞는 적절한 스타일을 적용할 수 있습니다.</p><h2 id="▫︎-활용-패턴"><a href="#▫︎-활용-패턴" class="headerlink" title="▫︎ 활용 패턴"></a>▫︎ 활용 패턴</h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 동적 스타일링이 필요한 경우</span></span><br><span class="line">&lt;<span class="title class_">Button</span></span><br><span class="line">  fill=<span class="string">&quot;blue&quot;</span></span><br><span class="line">  size=<span class="string">&quot;modal&quot;</span></span><br><span class="line">  className=&#123;<span class="title function_">cn</span>(</span><br><span class="line">    <span class="string">&quot;mt-4&quot;</span>,</span><br><span class="line">    isSpecial &amp;&amp; <span class="string">&quot;border-2 border-primary-normal&quot;</span>,</span><br><span class="line">    isPriority ? <span class="string">&quot;shadow-lg&quot;</span> : <span class="string">&quot;shadow-sm&quot;</span></span><br><span class="line">  )&#125;</span><br><span class="line">  label=<span class="string">&quot;확인&quot;</span></span><br><span class="line">/&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 조건부 스타일링이 필요한 경우</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">fill</span>=<span class="string">&quot;white&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">size</span>=<span class="string">&quot;default&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">classNameCondition</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &#x27;<span class="attr">opacity-50</span> <span class="attr">cursor-not-allowed</span>&#x27;<span class="attr">:</span> <span class="attr">isDisabled</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &#x27;<span class="attr">shadow-md</span>&#x27;<span class="attr">:</span> <span class="attr">isActive</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &#x27;<span class="attr">ring-2</span> <span class="attr">ring-primary-normal</span>&#x27;<span class="attr">:</span> <span class="attr">isFocused</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">label</span>=<span class="string">&quot;제출하기&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  <span class="attr">disabled</span>=<span class="string">&#123;isDisabled&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">/&gt;</span></span></span><br></pre></td></tr></table></figure><p>활용 패턴에서는 다음과 같은 이점을 얻을 수 있습니다.</p><ul><li>className을 통해 상황에 따른 추가적인 스타일을 적용할 수 있습니다.</li><li>classNameCondition을 사용하여 여러 조건에 따른 스타일 변화를 한 번에 관리할 수 있습니다.</li><li>기본 variants와 커스텀 스타일을 자연스럽게 조합할 수 있습니다.</li></ul><h1 id="▪︎-유지보수와-확장"><a href="#▪︎-유지보수와-확장" class="headerlink" title="▪︎ 유지보수와 확장"></a>▪︎ 유지보수와 확장</h1><p>이러한 설계는 장기적인 관점에서 큰 이점을 제공합니다.</p><h3 id="1-새로운-디자인-요구사항-대응"><a href="#1-새로운-디자인-요구사항-대응" class="headerlink" title="1. 새로운 디자인 요구사항 대응"></a>1. <strong>새로운 디자인 요구사항 대응</strong></h3><ul><li>새로운 variant를 추가하기 쉽습니다.</li><li>기존 스타일을 수정하더라도 타입 시스템이 변경이 필요한 곳을 알려줍니다.</li></ul><h3 id="2-일관성-유지"><a href="#2-일관성-유지" class="headerlink" title="2. 일관성 유지"></a><strong>2. 일관성 유지</strong></h3><ul><li>모든 버튼이 동일한 스타일 시스템을 따르게 됩니다.</li><li>디자인 토큰의 변경이 용이합니다.</li></ul><h3 id="3-팀-협업"><a href="#3-팀-협업" class="headerlink" title="3. 팀 협업"></a><strong>3. 팀 협업</strong></h3><ul><li>명확한 사용 방법과 타입 지원으로 다른 개발자들도 쉽게 사용할 수 있습니다.</li><li>문서화가 용이합니다.</li></ul><h1 id="▪︎-마치며"><a href="#▪︎-마치며" class="headerlink" title="▪︎ 마치며"></a>▪︎ 마치며</h1><p>이번 글에서는 CVA, CLSX, Tailwind Merge를 조합하여 어떻게 확장 가능하고 유지보수하기 좋은 버튼 컴포넌트를 구현했는지 살펴보았습니다. 이러한 설계 방식을 통해 얻은 주요 이점들을 정리해보면 다음과 같습니다:</p><h2 id="▫︎-실제-프로젝트에서의-효과"><a href="#▫︎-실제-프로젝트에서의-효과" class="headerlink" title="▫︎ 실제 프로젝트에서의 효과"></a><strong>▫︎ 실제 프로젝트에서의 효과</strong></h2><ol><li><strong>개발 생산성 향상</strong><ul><li>타입 시스템의 지원으로 실수를 사전에 방지할 수 있었습니다.</li><li>자동 완성 기능으로 개발 속도가 크게 향상되었습니다.</li><li>반복적인 스타일링 코드 작성이 줄어들었습니다.</li></ul></li><li><strong>디자인 시스템 일관성 확보</strong><ul><li>중앙에서 관리되는 스타일 variants로 인해 일관된 UI를 유지할 수 있었습니다.</li><li>디자인 변경 사항을 쉽게 적용할 수 있었습니다.</li><li>새로운 디자인 요구사항에도 유연하게 대응할 수 있었습니다.</li></ul></li><li><strong>코드 품질 향상</strong><ul><li>타입 안전성으로 인해 런타임 에러가 감소했습니다.</li><li>스타일 관련 버그를 쉽게 추적하고 해결할 수 있었습니다.</li><li>코드베이스가 커져도 유지보수가 어렵지 않았습니다.</li></ul></li></ol><p>이러한 접근 방식은 단순히 스타일링 문제를 해결하는 것을 넘어서, 확장 가능하고 유지보수하기 좋은 컴포넌트 시스템을 구축하는 데 큰 도움이 되었습니다. 특히 팀 단위의 개발에서 일관성을 유지하면서도 유연한 확장이 가능한 구조를 만들 수 있었다는 점에서 큰 의미가 있었습니다.</p><p>앞으로도 이러한 경험을 바탕으로, 더 나은 컴포넌트 시스템을 구축해 나가도록 하겠습니다.</p>]]></content:encoded>
      
      
      <category domain="https://NamgungJongMin.github.io/categories/Project/">Project</category>
      
      
      <category domain="https://NamgungJongMin.github.io/tags/WEGO/">WEGO</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/">프로젝트</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/tailwind-css/">tailwind css</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/clsx/">clsx</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/cva/">cva</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/tailwind-merge/">tailwind merge</category>
      
      
      <comments>https://namgungjongmin.github.io/2025/01/11/project/wego/cn/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>WEGO ) Next.js 미들웨어를 활용한 유저 인증 플로우 구현</title>
      <link>https://namgungjongmin.github.io/2025/01/08/project/wego/%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4/</link>
      <guid>https://namgungjongmin.github.io/2025/01/08/project/wego/%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4/</guid>
      <pubDate>Wed, 08 Jan 2025 14:12:21 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/vbghdl/post/921dd816-acad-468d-b160-8e912a3d9f5f/image.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;웹 애플리케이션에서 인증된</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://velog.velcdn.com/images/vbghdl/post/921dd816-acad-468d-b160-8e912a3d9f5f/image.png"></p><blockquote><p>웹 애플리케이션에서 인증된 사용자와 비인증 사용자에 대한 페이지 접근 제어는 매우 중요합니다. 특히 사용자 경험(UX)을 해치지 않으면서 안전하게 구현하는 것이 핵심인데요. 이번 글에서는 Next.js의 미들웨어를 활용해 어떻게 더 나은 인증 플로우를 구현했는지 공유하고자 합니다.</p></blockquote><h1 id="▪︎-기존-인증-구현의-문제점"><a href="#▪︎-기존-인증-구현의-문제점" class="headerlink" title="▪︎ 기존 인증 구현의 문제점"></a>▪︎ <strong>기존 인증 구현의 문제점</strong></h1><p>유저의 인증 여부를 판단하기 위해 token 검증만을 위한 api를 백엔드 측에 요청했습니다. 백엔드 측에서는 요청의 쿠키에서 accessToken을 읽어 그 검증 여부에 따라 결과를 반환해줬습니다. 우리 프론트에서는 인가 필요 페이지에서 그 결과가 성공이면 페이지를 보여주고, 실패면 로그인 페이지로 리다이렉트 시키는 로직이 필요했습니다.</p><p>처음에는 컴포넌트 내부에서 api 요청을 하고 그 결과에 따라 리다이렉트 여부를 결정했습니다. 그러나 이 경우 api 요청에 대한 결과를 받는 동안 잠깐동안 페이지의 레이아웃이 보여지는 플리킹 현상이 발생했습니다. 추가로 각 컴포넌트마다 토큰 인증에 따른 리다이렉트 로직을 작성해주어야 했습니다.</p><h2 id="▫︎-깜빡임-현상-Flash-of-Unauthorized-Content"><a href="#▫︎-깜빡임-현상-Flash-of-Unauthorized-Content" class="headerlink" title="▫︎ 깜빡임 현상 (Flash of Unauthorized Content)"></a>▫︎ <strong>깜빡임 현상 (Flash of Unauthorized Content)</strong></h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 컴포넌트 내부에서 인증 체크 시 발생하는 문제</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">ProtectedPage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 인증 체크 후 리다이렉트</span></span><br><span class="line">    <span class="keyword">if</span> (!isAuthenticated) &#123;</span><br><span class="line">      router.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>보호된 콘텐츠<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>; <span class="comment">// 잠깐 보였다가 사라짐</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="▫︎-중복-코드-발생"><a href="#▫︎-중복-코드-발생" class="headerlink" title="▫︎ 중복 코드 발생"></a>▫︎ <strong>중복 코드 발생</strong></h2><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 여러 서버 컴포넌트에서 반복되는 인증 체크 로직</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">Page1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isAuthenticated = <span class="keyword">await</span> <span class="title function_">checkAuth</span>();</span><br><span class="line">  <span class="keyword">if</span> (!isAuthenticated) &#123;</span><br><span class="line">    <span class="title function_">redirect</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">Page2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isAuthenticated = <span class="keyword">await</span> <span class="title function_">checkAuth</span>();</span><br><span class="line">  <span class="keyword">if</span> (!isAuthenticated) &#123;</span><br><span class="line">    <span class="title function_">redirect</span>(<span class="string">&quot;/login&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="▪︎-미들웨어를-활용한-해결-방안"><a href="#▪︎-미들웨어를-활용한-해결-방안" class="headerlink" title="▪︎ 미들웨어를 활용한 해결 방안"></a>▪︎ 미들웨어를 활용한 해결 방안</h1><h2 id="▫︎-중앙-집중화된-인증-로직"><a href="#▫︎-중앙-집중화된-인증-로직" class="headerlink" title="▫︎ 중앙 집중화된 인증 로직"></a>▫︎ <strong>중앙 집중화된 인증 로직</strong></h2><p>미들웨어의 가장 큰 장점은 모든 페이지 요청에 대해 선제적으로 실행된다는 점입니다. 이를 활용하여 인증 로직을 중앙에서 관리할 수 있습니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// middleware.ts</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">middleware</span> = (<span class="params">request: NextRequest</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 정적 파일 요청은 미들웨어 처리하지 않음</span></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    request.<span class="property">nextUrl</span>.<span class="property">pathname</span>.<span class="title function_">startsWith</span>(<span class="string">&quot;/_next&quot;</span>) ||</span><br><span class="line">    request.<span class="property">nextUrl</span>.<span class="property">pathname</span>.<span class="title function_">includes</span>(<span class="string">&quot;/api/&quot;</span>) ||</span><br><span class="line">    request.<span class="property">nextUrl</span>.<span class="property">pathname</span>.<span class="title function_">match</span>(<span class="regexp">/\.(ico|png|svg|jpg|jpeg|gif)$/</span>)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">next</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> response = <span class="title class_">NextResponse</span>.<span class="title function_">next</span>();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 로그인 여부에 따라 리다이렉트</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">authRedirect</span>(request, response);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>여기서 주목할 점은 다음과 같습니다.</p><ul><li><strong>성능 최적화</strong>: 정적 파일에 대한 요청은 미들웨어를 거치지 않도록 처리했습니다. 이는 불필요한 인증 검사를 줄여 성능을 향상시킵니다.</li><li><strong>확장성</strong>: authRedirect 함수를 별도로 분리하여, 추후 인증 로직이 변경되거나 추가되어도 유연하게 대응할 수 있습니다.</li><li><strong>유지보수성</strong>: 인증 관련 로직이 한 곳에 집중되어 있어, 변경이 필요할 때 이 파일만 수정하면 됩니다.</li></ul><h2 id="▫︎-환경별-토큰-검증-전략"><a href="#▫︎-환경별-토큰-검증-전략" class="headerlink" title="▫︎ 환경별 토큰 검증 전략"></a>▫︎ <strong>환경별 토큰 검증 전략</strong></h2><p>개발 환경과 프로덕션 환경에서의 토큰 검증 방식을 분리하여 관리했습니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">authRedirect</span> = <span class="keyword">async</span> (<span class="params">request: NextRequest, response: NextResponse</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> verifyResponse =</span><br><span class="line">    process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;development&quot;</span> ? <span class="keyword">await</span> <span class="title function_">verifyTokenMock</span>(request) : <span class="keyword">await</span> <span class="title function_">verifyToken</span>(request);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 토큰 유효성 검증이 필요한 페이지 처리</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="title class_">Object</span>.<span class="title function_">values</span>(<span class="variable constant_">NEED_LOGIN_PATH</span>) <span class="keyword">as</span> <span class="built_in">string</span>[]).<span class="title function_">includes</span>(request.<span class="property">nextUrl</span>.<span class="property">pathname</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (verifyResponse.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> loginUrl = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&quot;/login&quot;</span>, request.<span class="property">nextUrl</span>.<span class="property">origin</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">redirect</span>(loginUrl);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 로그인된 사용자가 접근하면 안 되는 페이지 처리</span></span><br><span class="line">  <span class="keyword">if</span> ((<span class="title class_">Object</span>.<span class="title function_">values</span>(<span class="variable constant_">NEED_LOGOUT_PATH</span>) <span class="keyword">as</span> <span class="built_in">string</span>[]).<span class="title function_">includes</span>(request.<span class="property">nextUrl</span>.<span class="property">pathname</span>)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (verifyResponse.<span class="property">status</span> !== <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> mainUrl = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&quot;/&quot;</span>, request.<span class="property">nextUrl</span>.<span class="property">origin</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">NextResponse</span>.<span class="title function_">redirect</span>(mainUrl);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>환경 분기</strong>: process.env.NODE_ENV를 통해 개발&#x2F;프로덕션 환경을 구분하여 적절한 검증 로직을 실행합니다.</li><li><strong>페이지 접근 제어</strong>:<ul><li>NEED_LOGIN_PATH: 로그인이 필요한 페이지들 (예: 마이페이지, 리뷰 작성 등)</li><li>NEED_LOGOUT_PATH: 비로그인 상태에서만 접근 가능한 페이지들 (예: 로그인, 회원가입)</li></ul></li><li><strong>명확한 리다이렉션</strong>: 인증 상태에 따라 적절한 페이지로 리다이렉트합니다.</li></ul><h2 id="▫︎-구현-시-고려-사항"><a href="#▫︎-구현-시-고려-사항" class="headerlink" title="▫︎ 구현 시 고려 사항"></a>▫︎ 구현 시 고려 사항</h2><h3 id="1-성능-최적화"><a href="#1-성능-최적화" class="headerlink" title="1. 성능 최적화"></a>1. 성능 최적화</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> config = &#123;</span><br><span class="line">  <span class="attr">matcher</span>: [<span class="string">&quot;/((?!api|_next/static|_next/image|favicon.ico).*)&quot;</span>],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>선택적 실행</strong>: 모든 요청이 아닌, 필요한 경로에 대해서만 미들웨어가 실행되도록 설정</li><li><strong>정적 리소스 제외</strong>: 이미지, 스타일시트 등 정적 리소스는 미들웨어 처리에서 제외</li></ul><h3 id="2-서버-컴포넌트-지원"><a href="#2-서버-컴포넌트-지원" class="headerlink" title="2. 서버 컴포넌트 지원"></a>2. <strong>서버 컴포넌트 지원</strong></h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">setPathnameHeader</span> = (<span class="params">request: NextRequest, response: NextResponse</span>) =&gt; &#123;</span><br><span class="line">  response.<span class="property">headers</span>.<span class="title function_">set</span>(<span class="string">&quot;x-pathname&quot;</span>, request.<span class="property">nextUrl</span>.<span class="property">pathname</span>);</span><br><span class="line">  <span class="keyword">return</span> response;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li><strong>경로 정보 전달</strong>: 서버 컴포넌트에서 현재 경로 정보가 필요한 경우를 위해 헤더에 포함</li><li><strong>확장성</strong>: 추후 서버 컴포넌트에서 필요한 추가 정보도 헤더를 통해 전달 가능</li></ul><h1 id="▪︎-미들웨어의-Edge-Runtime을-고려한-모킹-시스템"><a href="#▪︎-미들웨어의-Edge-Runtime을-고려한-모킹-시스템" class="headerlink" title="▪︎ 미들웨어의 Edge Runtime을 고려한 모킹 시스템"></a>▪︎ 미들웨어의 <strong>Edge Runtime을 고려한 모킹 시스템</strong></h1><p>Next.js 미들웨어는 Edge Runtime에서 실행되기 때문에, api 모킹을 위해 개발 환경에서 사용하고 있던 MSW와 같은 모킹 도구를 사용할 수 없었습니다. 이를 해결하기 위한 전용 모킹 시스템을 구현했습니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// middleware-mock.ts</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mockResponses = &#123;</span><br><span class="line">  <span class="string">&quot;/auth/token/verify&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">success</span>: &#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">      <span class="attr">body</span>: &#123; <span class="attr">ok</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;Token is valid&quot;</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: &#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="number">401</span>,</span><br><span class="line">      <span class="attr">body</span>: &#123; <span class="attr">ok</span>: <span class="literal">false</span>, <span class="attr">message</span>: <span class="string">&quot;Unauthorized&quot;</span> &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">mockFetch</span> = <span class="keyword">async</span> (<span class="params">url: <span class="built_in">string</span>, options?: RequestInit</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> endpoint = <span class="keyword">new</span> <span class="title function_">URL</span>(url).<span class="property">pathname</span>;</span><br><span class="line">  <span class="keyword">const</span> mock = mockResponses[endpoint <span class="keyword">as</span> keyof <span class="keyword">typeof</span> mockResponses];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!mock) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fetch</span>(url); <span class="comment">// 모킹되지 않은 엔드포인트는 실제 요청 수행</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> cookies = options?.<span class="property">headers</span> &amp;&amp; <span class="string">&quot;Cookie&quot;</span> <span class="keyword">in</span> options.<span class="property">headers</span> ? options.<span class="property">headers</span>.<span class="property">Cookie</span> : <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">const</span> hasAccessToken = cookies.<span class="title function_">includes</span>(<span class="string">&quot;accessToken=&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 쿠키의 토큰 존재 여부에 따라 적절한 응답 반환</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Response</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(hasAccessToken ? mock.<span class="property">success</span>.<span class="property">body</span> : mock.<span class="property">error</span>.<span class="property">body</span>), &#123;</span><br><span class="line">    <span class="attr">status</span>: hasAccessToken ? mock.<span class="property">success</span>.<span class="property">status</span> : mock.<span class="property">error</span>.<span class="property">status</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123; <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span> &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="▫︎-모킹-시스템의-주요-특징"><a href="#▫︎-모킹-시스템의-주요-특징" class="headerlink" title="▫︎ 모킹 시스템의 주요 특징:"></a>▫︎ <strong>모킹 시스템의 주요 특징</strong>:</h2><ul><li><strong>엔드포인트 기반 모킹</strong>: 각 엔드포인트별로 성공&#x2F;실패 응답을 미리 정의합니다.</li><li><strong>토큰 기반 응답</strong>: 쿠키의 토큰 존재 여부에 따라 다른 응답을 반환합니다.</li><li><strong>유연한 확장</strong>: 새로운 엔드포인트 추가가 용이한 구조입니다.</li><li><strong>폴백 메커니즘</strong>: 모킹되지 않은 엔드포인트는 실제 API를 호출합니다.</li><li><strong>이러한 모킹 시스템의 장점</strong>:<ul><li>개발 효율성: 백엔드 API 완성 전에도 프론트엔드 개발 진행 가능</li><li>안정성: 예측 가능한 응답으로 일관된 개발 환경 제공</li><li>디버깅 용이성: 인증 관련 문제 발생 시 빠른 원인 파악 가능</li></ul></li></ul><h1 id="▪︎-마치며"><a href="#▪︎-마치며" class="headerlink" title="▪︎ 마치며"></a>▪︎ 마치며</h1><p>Next.js의 미들웨어를 활용한 인증 플로우 구현은 단순히 기능적인 요구사항을 충족시키는 것을 넘어, 사용자 경험과 코드 품질 모두를 개선하는 결과를 가져왔습니다. 특히 페이지 전환 시의 깜빡임 현상 제거와 인증 로직의 중앙 집중화는 프로젝트의 품질을 한 단계 높이는 중요한 요소가 되었습니다.</p><p>앞으로도 사용자 경험을 해치지 않으면서도 안전한 인증 시스템을 구축하기 위한 고민을 계속해 나갈 예정입니다.</p>]]></content:encoded>
      
      
      <category domain="https://NamgungJongMin.github.io/categories/Project/">Project</category>
      
      
      <category domain="https://NamgungJongMin.github.io/tags/WEGO/">WEGO</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/">프로젝트</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/next-js/">next.js</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4/">미들웨어</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%9C%A0%EC%A0%80-%EC%9D%B8%EC%A6%9D/">유저 인증</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EB%A6%AC%EB%8B%A4%EC%9D%B4%EB%A0%89%ED%8A%B8/">리다이렉트</category>
      
      
      <comments>https://namgungjongmin.github.io/2025/01/08/project/wego/%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>WEGO ) 테스트 코드로 더 안정적인 프로젝트 만들기: Jest를 활용한 실전 테스트 적용</title>
      <link>https://namgungjongmin.github.io/2025/01/08/project/wego/%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%BD%94%EB%93%9C/</link>
      <guid>https://namgungjongmin.github.io/2025/01/08/project/wego/%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%BD%94%EB%93%9C/</guid>
      <pubDate>Wed, 08 Jan 2025 11:42:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/vbghdl/post/921dd816-acad-468d-b160-8e912a3d9f5f/image.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;프로젝트를 진행하면서 가장</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://velog.velcdn.com/images/vbghdl/post/921dd816-acad-468d-b160-8e912a3d9f5f/image.png"></p><blockquote><p>프로젝트를 진행하면서 가장 중요하게 생각했던 것 중 하나는 코드의 안정성이었습니다. 특히 여행 관련 서비스를 개발하면서, 사용자 경험에 직접적인 영향을 미치는 UI 컴포넌트들의 안정성은 매우 중요했습니다.</p></blockquote><h1 id="▪︎-테스트-코드의-필요성"><a href="#▪︎-테스트-코드의-필요성" class="headerlink" title="▪︎ 테스트 코드의 필요성"></a>▪︎ <strong>테스트 코드의 필요성</strong></h1><h2 id="▫︎-복잡한-UI-상태-관리"><a href="#▫︎-복잡한-UI-상태-관리" class="headerlink" title="▫︎ 복잡한 UI 상태 관리"></a>▫︎ <strong>복잡한 UI 상태 관리</strong></h2><p>여행 서비스의 특성상 다양한 상태를 가진 컴포넌트들이 많았습니다. 예를 들어 리뷰 카드의 경우 아래와 같은 복잡한 상태들을 수동으로 테스트하는 것은 비효율적이며, 실수하기 쉬웠습니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;리뷰 카드 컴포넌트&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> props = &#123;</span><br><span class="line">    <span class="attr">reviewId</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">profileImage</span>: <span class="string">&#x27;/user.jpg&#x27;</span>,</span><br><span class="line">    <span class="attr">reviewImage</span>: <span class="string">&#x27;/test.png&#x27;</span>,</span><br><span class="line">    <span class="attr">title</span>: <span class="string">&#x27;테스트 리뷰&#x27;</span>,</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;이것은 테스트 리뷰 내용입니다.&#x27;</span>,</span><br><span class="line">    <span class="attr">starRating</span>: <span class="number">4.5</span>,</span><br><span class="line">    <span class="attr">travelLocation</span>: <span class="string">&#x27;서울&#x27;</span>,</span><br><span class="line">    <span class="attr">createdAt</span>: <span class="string">&#x27;2023-10-10&#x27;</span>,</span><br><span class="line">    <span class="attr">likesFlag</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;리뷰 카드가 올바르게 렌더링되어야 합니다 (리뷰 페이지)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">renderWithQueryClient</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">ReviewCard</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">nickname</span>=<span class="string">&quot;테스터&quot;</span> /&gt;</span></span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">expect</span>(screen.<span class="title function_">getByText</span>(<span class="string">&#x27;테스트 리뷰&#x27;</span>)).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">    <span class="title function_">expect</span>(</span><br><span class="line">      screen.<span class="title function_">getByText</span>(<span class="string">&#x27;이것은 테스트 리뷰 내용입니다.&#x27;</span>),</span><br><span class="line">    ).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">    <span class="title function_">expect</span>(screen.<span class="title function_">getByText</span>(<span class="string">&#x27;테스터&#x27;</span>)).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">    <span class="title function_">expect</span>(screen.<span class="title function_">getByText</span>(<span class="string">&#x27;4.5&#x27;</span>)).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;리뷰 카드가 올바르게 렌더링되어야 합니다 (마이페이지)&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">renderWithQueryClient</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">ReviewCard</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">expect</span>(screen.<span class="title function_">getByText</span>(<span class="string">&#x27;테스트 리뷰&#x27;</span>)).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">    <span class="title function_">expect</span>(</span><br><span class="line">      screen.<span class="title function_">getByText</span>(<span class="string">&#x27;이것은 테스트 리뷰 내용입니다.&#x27;</span>),</span><br><span class="line">    ).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">    <span class="title function_">expect</span>(screen.<span class="title function_">getByText</span>(<span class="string">&#x27;4.5&#x27;</span>)).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">    <span class="title function_">expect</span>(screen.<span class="title function_">getByText</span>(<span class="string">&#x27;서울&#x27;</span>)).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&#x27;이미지가 올바르게 표시되어야 합니다&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">renderWithQueryClient</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">ReviewCard</span> &#123;<span class="attr">...props</span>&#125; /&gt;</span></span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> image = screen.<span class="title function_">getByAltText</span>(<span class="string">&#x27;테스트 리뷰&#x27;</span>);</span><br><span class="line">    <span class="title function_">expect</span>(image).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="▫︎-비동기-데이터-처리의-안정성"><a href="#▫︎-비동기-데이터-처리의-안정성" class="headerlink" title="▫︎ 비동기 데이터 처리의 안정성"></a>▫︎ <strong>비동기 데이터 처리의 안정성</strong></h2><p>API 호출과 같은 비동기 작업이 많은 서비스 특성상, 데이터 로딩, 에러 상태 등 다양한 상황에 대한 테스트가 필요했습니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&quot;로딩 중일 때 스켈레톤 UI를 표시한다&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  (useReview <span class="keyword">as</span> jest.<span class="property">Mock</span>).<span class="title function_">mockReturnValue</span>(&#123;</span><br><span class="line">    <span class="attr">isLoading</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; container &#125; = <span class="title function_">renderWithQueryClient</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">ReviewContents</span> /&gt;</span></span>);</span><br><span class="line">  <span class="comment">// 스켈레톤 UI의 특정 클래스명을 기준으로 요소를 찾습니다.</span></span><br><span class="line">  <span class="keyword">const</span> skeletonElements = container.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.skeleton-style&quot;</span>);</span><br><span class="line">  <span class="title function_">expect</span>(skeletonElements.<span class="property">length</span>).<span class="title function_">toBeGreaterThan</span>(<span class="number">0</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&quot;리뷰 데이터가 있을 때 리뷰 카드가 렌더링된다&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  (useReview <span class="keyword">as</span> jest.<span class="property">Mock</span>).<span class="title function_">mockReturnValue</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">pages</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">content</span>: [</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">nickname</span>: <span class="string">&quot;사용자1&quot;</span>,</span><br><span class="line">                <span class="attr">profileImage</span>: <span class="string">&quot;https://example.com/profile1.jpg&quot;</span>,</span><br><span class="line">                <span class="attr">reviewImage</span>: <span class="string">&quot;https://example.com/review1.jpg&quot;</span>,</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&quot;리뷰 제목 1&quot;</span>,</span><br><span class="line">                <span class="attr">content</span>: <span class="string">&quot;리뷰 내용 1&quot;</span>,</span><br><span class="line">                <span class="attr">starRating</span>: <span class="number">5</span>,</span><br><span class="line">                <span class="attr">travelLocation</span>: <span class="string">&quot;서울&quot;</span>,</span><br><span class="line">                <span class="attr">createdAt</span>: <span class="string">&quot;2023-10-01&quot;</span>,</span><br><span class="line">                <span class="attr">isLiked</span>: <span class="literal">true</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">isLoading</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">isError</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">hasNextPage</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">fetchNextPage</span>: jest.<span class="title function_">fn</span>(),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; getByText &#125; = <span class="title function_">renderWithQueryClient</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">ReviewContents</span> /&gt;</span></span>);</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">getByText</span>(<span class="string">&quot;리뷰 제목 1&quot;</span>)).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">getByText</span>(<span class="string">&quot;리뷰 내용 1&quot;</span>)).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">it</span>(<span class="string">&quot;리뷰 데이터가 없을 때 아무것도 렌더링하지 않는다&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  (useReview <span class="keyword">as</span> jest.<span class="property">Mock</span>).<span class="title function_">mockReturnValue</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">pages</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">content</span>: [],</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">isLoading</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">isError</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">hasNextPage</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">fetchNextPage</span>: jest.<span class="title function_">fn</span>(),</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; queryByText &#125; = <span class="title function_">renderWithQueryClient</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">ReviewContents</span> /&gt;</span></span>);</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">queryByText</span>(<span class="regexp">/리뷰 제목 1/i</span>)).<span class="property">not</span>.<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="▪︎-테스트-코드-작성-전략"><a href="#▪︎-테스트-코드-작성-전략" class="headerlink" title="▪︎ 테스트 코드 작성 전략"></a>▪︎ 테스트 코드 작성 전략</h1><h2 id="▫︎-테스트-시나리오-구성"><a href="#▫︎-테스트-시나리오-구성" class="headerlink" title="▫︎ 테스트 시나리오 구성"></a>▫︎ <strong>테스트 시나리오 구성</strong></h2><p>테스트 코드는 크게 세 가지 관점에서 작성했습니다.</p><h3 id="1-기본-렌더링-테스트"><a href="#1-기본-렌더링-테스트" class="headerlink" title="1. 기본 렌더링 테스트"></a>1. 기본 렌더링 테스트</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&quot;ReviewComment&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">it</span>(<span class="string">&quot;리뷰 작성칸을 렌더링합니다&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">ReviewComment</span> /&gt;</span></span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">expect</span>(screen.<span class="title function_">getByText</span>(<span class="string">&quot;여행에 대한 후기를 남겨주세요!&quot;</span>)).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">    <span class="title function_">expect</span>(screen.<span class="title function_">getByLabelText</span>(<span class="string">&quot;최대 20자 입력 가능 textarea&quot;</span>)).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">    <span class="title function_">expect</span>(screen.<span class="title function_">getByPlaceholderText</span>(<span class="string">&quot;여행 제목을 입력해 주세요.&quot;</span>)).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">    <span class="title function_">expect</span>(screen.<span class="title function_">getByLabelText</span>(<span class="string">&quot;최대 100자 입력 가능 textarea&quot;</span>)).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">    <span class="title function_">expect</span>(screen.<span class="title function_">getByPlaceholderText</span>(<span class="string">&quot;여행에 대한 다양한 후기를 공유해 주세요!&quot;</span>)).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-사용자-인터렉션-테스트"><a href="#2-사용자-인터렉션-테스트" class="headerlink" title="2. 사용자 인터렉션 테스트"></a>2. 사용자 인터렉션 테스트</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&quot;페이지 버튼 클릭 시 paginate 함수가 호출된다&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> paginateMock = jest.<span class="title function_">fn</span>();</span><br><span class="line">  <span class="keyword">const</span> &#123; getByText &#125; = <span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Pagination</span> <span class="attr">totalPages</span>=<span class="string">&#123;4&#125;</span> <span class="attr">currentPage</span>=<span class="string">&#123;1&#125;</span> <span class="attr">paginate</span>=<span class="string">&#123;paginateMock&#125;</span> /&gt;</span></span>);</span><br><span class="line"></span><br><span class="line">  fireEvent.<span class="title function_">click</span>(<span class="title function_">getByText</span>(<span class="string">&quot;2&quot;</span>));</span><br><span class="line">  <span class="title function_">expect</span>(paginateMock).<span class="title function_">toHaveBeenCalledWith</span>(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-엣지-케이스-테스트"><a href="#3-엣지-케이스-테스트" class="headerlink" title="3. 엣지 케이스 테스트"></a>3. 엣지 케이스 테스트</h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&quot;리뷰 데이터가 없을 때 빈 상태 메시지를 렌더링한다&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  (useMyReview <span class="keyword">as</span> jest.<span class="property">Mock</span>).<span class="title function_">mockReturnValue</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">content</span>: [],</span><br><span class="line">        <span class="attr">total</span>: <span class="number">0</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">renderWithProvider</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Written</span> /&gt;</span></span>);</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(screen.<span class="title function_">getByText</span>(<span class="string">&quot;아직 작성한 리뷰가 없어요!&quot;</span>)).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="▫︎-비동기-테스트-처리"><a href="#▫︎-비동기-테스트-처리" class="headerlink" title="▫︎ 비동기 테스트 처리"></a>▫︎ <strong>비동기 테스트 처리</strong></h2><h3 id="1-로딩-상태-처리"><a href="#1-로딩-상태-처리" class="headerlink" title="1. 로딩 상태 처리"></a>1. <strong>로딩 상태 처리</strong></h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&quot;로딩 중일 때 스켈레톤 UI를 표시한다&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  (useReview <span class="keyword">as</span> jest.<span class="property">Mock</span>).<span class="title function_">mockReturnValue</span>(&#123;</span><br><span class="line">    <span class="attr">isLoading</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; container &#125; = <span class="title function_">renderWithQueryClient</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">ReviewContents</span> /&gt;</span></span>);</span><br><span class="line">  <span class="comment">// 스켈레톤 UI의 특정 클래스명을 기준으로 요소를 찾습니다.</span></span><br><span class="line">  <span class="keyword">const</span> skeletonElements = container.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.skeleton-style&quot;</span>);</span><br><span class="line">  <span class="title function_">expect</span>(skeletonElements.<span class="property">length</span>).<span class="title function_">toBeGreaterThan</span>(<span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-데이터-페칭-결과-처리"><a href="#2-데이터-페칭-결과-처리" class="headerlink" title="2. 데이터 페칭 결과 처리"></a>2. <strong>데이터 페칭 결과 처리</strong></h3><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&quot;여행 데이터가 있을 때 여행 카드가 렌더링된다&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  (usePastTravel <span class="keyword">as</span> jest.<span class="property">Mock</span>).<span class="title function_">mockReturnValue</span>(&#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">content</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">travelId</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">travelName</span>: <span class="string">&quot;과거 여행 1&quot;</span>,</span><br><span class="line">            <span class="attr">maxTravelMateCount</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="attr">currentTravelMateCount</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">isDomestic</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">location</span>: <span class="string">&quot;서울&quot;</span>,</span><br><span class="line">            <span class="attr">image</span>: <span class="string">&quot;https://example.com/image.jpg&quot;</span>,</span><br><span class="line">            <span class="attr">startAt</span>: <span class="string">&quot;2023-10-01&quot;</span>,</span><br><span class="line">            <span class="attr">endAt</span>: <span class="string">&quot;2023-10-10&quot;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">total</span>: <span class="number">1</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> &#123; getByText &#125; = <span class="title function_">renderWithQueryClient</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">PastTravel</span> /&gt;</span></span>);</span><br><span class="line">  <span class="title function_">expect</span>(<span class="title function_">getByText</span>(<span class="regexp">/과거 여행 1/i</span>)).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-에러-상태-처리"><a href="#3-에러-상태-처리" class="headerlink" title="3. 에러 상태 처리"></a>3. 에러 상태 처리</h3><p>추가로 각 컴포넌트에서 발생할 수 있는 에러 상황을 고려하여 테스트케이스를 작성했습니다.</p><h2 id="▫︎-모킹-전략-활용"><a href="#▫︎-모킹-전략-활용" class="headerlink" title="▫︎ 모킹 전략 활용"></a>▫︎ 모킹 전략 활용</h2><p>외부 의존성이 있는 컴포넌트의 경우, 적절한 모킹을 통해 테스트의 안정성을 확보했습니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jest.<span class="title function_">mock</span>(<span class="string">&quot;next/navigation&quot;</span>, <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">  <span class="attr">useRouter</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">push</span>: jest.<span class="title function_">fn</span>(),</span><br><span class="line">    <span class="attr">replace</span>: jest.<span class="title function_">fn</span>(),</span><br><span class="line">    <span class="attr">back</span>: jest.<span class="title function_">fn</span>(),</span><br><span class="line">    <span class="comment">// 필요한 다른 router 메서드들...</span></span><br><span class="line">  &#125;),</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><h1 id="▪︎-테스트-코드-작성-시-중점-사항"><a href="#▪︎-테스트-코드-작성-시-중점-사항" class="headerlink" title="▪︎ 테스트 코드 작성 시 중점 사항"></a>▪︎ <strong>테스트 코드 작성 시 중점 사항</strong></h1><h2 id="▫︎-테스트-가독성"><a href="#▫︎-테스트-가독성" class="headerlink" title="▫︎ 테스트 가독성"></a>▫︎ <strong>테스트 가독성</strong></h2><p>각 테스트 케이스의 의도가 명확히 드러나도록 작성했습니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">it</span>(<span class="string">&#x27;기본적으로 &quot;myTravel&quot; 탭이 선택되어야 한다&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">renderWithQueryClient</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">MainTab</span> <span class="attr">selectedTab</span>=<span class="string">&quot;myTravel&quot;</span> <span class="attr">setSelectedTab</span>=<span class="string">&#123;setSelectedTabMock&#125;</span> <span class="attr">setSelectedSubTab</span>=<span class="string">&#123;setSelectedSubTabMock&#125;</span> /&gt;</span></span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="title function_">expect</span>(screen.<span class="title function_">getByText</span>(<span class="regexp">/나의 여행/i</span>)).<span class="title function_">toBeInTheDocument</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="▫︎-테스트-유지보수성"><a href="#▫︎-테스트-유지보수성" class="headerlink" title="▫︎ 테스트 유지보수성"></a>▫︎ <strong>테스트 유지보수성</strong></h2><p>반복되는 테스트 로직은 유틸리티 함수로 분리하여 재사용성을 높였습니다.</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">renderWithProvider</span> = (<span class="params">ui: React.ReactNode</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">QueryClientProvider</span> <span class="attr">client</span>=<span class="string">&#123;queryClient&#125;</span>&gt;</span>&#123;ui&#125;<span class="tag">&lt;/<span class="name">QueryClientProvider</span>&gt;</span></span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="▪︎-마치며"><a href="#▪︎-마치며" class="headerlink" title="▪︎ 마치며"></a>▪︎ 마치며</h1><p>테스트 코드 작성은 단순히 버그를 잡기 위한 도구가 아닌, 더 나은 설계를 위한 도구이자 문서의 역할도 수행했습니다. 특히 비동기 처리가 많은 현대 웹 애플리케이션에서 다양한 상황에 대한 테스트 케이스를 작성함으로써, 더 안정적인 서비스를 제공할 수 있었습니다.</p><p>앞으로도 테스트 커버리지를 높이고, 더 효율적인 테스트 전략을 발전시켜 나갈 예정입니다.</p>]]></content:encoded>
      
      
      <category domain="https://NamgungJongMin.github.io/categories/Project/">Project</category>
      
      
      <category domain="https://NamgungJongMin.github.io/tags/WEGO/">WEGO</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%ED%85%8C%EC%8A%A4%ED%8A%B8/">테스트</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%BD%94%EB%93%9C/">테스트코드</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8/">프로젝트</category>
      
      
      <comments>https://namgungjongmin.github.io/2025/01/08/project/wego/%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%BD%94%EB%93%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>KMP 알고리즘 ) 문자열에서 특정한 문자열을 찾는 것을 O(N)으로 해결하기</title>
      <link>https://namgungjongmin.github.io/2024/04/16/algorithm/kmp/</link>
      <guid>https://namgungjongmin.github.io/2024/04/16/algorithm/kmp/</guid>
      <pubDate>Tue, 16 Apr 2024 07:25:46 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;부분문자열-찾기&quot;&gt;&lt;a href=&quot;#부분</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png"></p><h1 id="부분문자열-찾기"><a href="#부분문자열-찾기" class="headerlink" title="부분문자열 찾기"></a>부분문자열 찾기</h1><p><img src="https://velog.velcdn.com/images/vbghdl/post/b197faaf-f92e-4f97-bdfa-c09bb9bbe970/image.png" alt="image.png"></p><blockquote><p>위 이미지와 같은 문제에서 어떠한 문자열 내에서 특정한 다른 문자열을 찾을 때 가장 단순한 방법은 두 문자열의 각 문자들을 비교하는 것입니다. 그러나 이 경우 각 문자열의 모든 문자들을 매칭하여 탐색해야하기 때문에 효율성이 낮습니다. 따라서 대상 문자열의 크기가 크거나 효율성을 높이고 싶다면 KMP 알고리즘을 고려해볼 수 있습니다. 위 사진을 예시로하여 문자열을 찾는 두가지 방법에 대해 밑에서 알아보겠습니다.</p></blockquote><h1 id="▪︎-두-문자열의-각-문자-비교"><a href="#▪︎-두-문자열의-각-문자-비교" class="headerlink" title="▪︎ 두 문자열의 각 문자 비교"></a>▪︎ 두 문자열의 각 문자 비교</h1><p>str을 기준으로 각 문자를 순회하되 해당 문자가 subStr의 첫 문자와 같다면 그 다음 문자들을 비교하는 방식으로 이루어집니다. 이 경우 str을 순회하는 start 포인터와 str과 subStr의 일치여부 확인을 위한 위치 포인터가 필요하기 때문에 O(NM)의 시간복잡도를 가집니다.</p><p><img src="https://velog.velcdn.com/images/vbghdl/post/9cf5f140-18fa-46f1-be7a-67fbc4c0888f/image.png" alt="image.png"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;ABCABCABBD&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> subStr = <span class="string">&quot;ABCABB&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> answerIdx = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> isMatched = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; subStr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (str[i + j] !== subStr[j]) &#123;</span><br><span class="line">      isMatched = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isMatched) answerIdx.<span class="title function_">push</span>(i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(answerIdx); <span class="comment">// output: [4] 4번째 문자로 시작하는 하나의 같은 문자열이 존재</span></span><br></pre></td></tr></table></figure><h1 id="▪︎-KMP-알고리즘"><a href="#▪︎-KMP-알고리즘" class="headerlink" title="▪︎ KMP 알고리즘"></a>▪︎ KMP 알고리즘</h1><p>위 방법을 개선하여 효율성 높게 문자열을 찾는 방법이 KMP 알고리즘입니다. KMP 알고리즘은 무려 O(N+M)의 시간복잡도로 해결이 가능합니다. 어떻게 그것이 가능할까요? 문자열들의 각 문자들을 비교하는 방법에서는 버려지는 정보들을 활용하기 때문입니다. 위의 예시를 다시 가져와보겠습니다.</p><p><img src="https://velog.velcdn.com/images/vbghdl/post/48c12352-403e-4c82-87ad-0b78085edc8e/image.png" alt="image.png"></p><p>두 문자열을 비교하던 중 매칭이되지 않은 문자들을 만났습니다. 이 때 우리는 ABCABC가 ABCABB가 아니라는 것을 확인함과 동시에 ABCABB의 앞쪽 문자들과 매칭되는 부분(index 3 ~ 4)이 있다는 정보를 얻게되었습니다. 이 정보를 활용하면 str문자열의 각 문자를 시작으로 하는 문자열을 전부 확인하는 것이 아니라 subStr의 앞쪽 부분과 매칭되는 index 3에서부터 다시 비교를 시작할 수 있습니다.</p><p>이 원리를 이용하면 str을 이중 순회하는 것이 아닌 한번의 순회만으로 문자열을 찾아낼 수 있습니다. subStr을 문자열의 접두사이면서 접미사인 부분 문자열들에 대한 정보와 매칭하고 그 정보를 이용하여 str의 문자를 순회하는 동안 subStr의 포인터를 이동시켜 같은 문자열인지를 판단합니다.</p><p>KMP 알고리즘은 다음 단계를 통해 구현할 수 있습니다.</p><ol><li>subStr의 접두사,접미사 관련 정보를 담은 pi를 생성합니다.</li><li>str을 순회하며 각 문자열의 pointer 이동합니다.</li><li>subStr의 포인터가 끝으로 이동했을 때에 문자끼리 같다면 동일 문자열입니다.</li></ol><h2 id="▫︎-failure-함수를-통해-pi-배열-생성"><a href="#▫︎-failure-함수를-통해-pi-배열-생성" class="headerlink" title="▫︎ failure 함수를 통해 pi 배열 생성"></a>▫︎ failure 함수를 통해 pi 배열 생성</h2><p><img src="https://velog.velcdn.com/images/vbghdl/post/703259a6-44a5-46a1-bb38-1287d68adcfa/image.png" alt="image.png"></p><p>pi 배열은 subStr의 접두사와 접미사를 확인하여 같은 길이를 값으로 가지는 배열입니다. pi의 index 0은 0으로 시작하며 이후부터는 해당 인덱스까지의 부분문자열의 접두사와 접미사가 같은 길이를 값으로 가집니다. <strong>pi 배열은 failure함수를 통해 만들 수 있습니다.</strong></p><p>“ABCA”의 경우 앞 뒤 “A”가 같기 때문에 1을 값으로 가집니다.</p><p>“ABCAB”의 경우 앞 뒤 “AB”가 같기 때문에 2를 값으로 가집니다.</p><h3 id="failure-함수의-동작"><a href="#failure-함수의-동작" class="headerlink" title="failure 함수의 동작"></a>failure 함수의 동작</h3><ol><li>첫 인덱스 값을 0으로하는 subStr 길이와 같은 배열을 생성합니다.</li><li>새로운 포인터 k를 선언하고 subStr을 순회하면서 다음 동작을 반복합니다.<ul><li>subStr[k]와 subStr[i]가 같은 경우 pi[i]에 k+1을 저장하고 k와 i 인덱스를 모두 증가시킵니다.</li><li>다를경우 k에 pi[k-1] 위치에 있는 값을 재할당합니다. (이 동작을 subStr[k]와 subStr[i]가 같아지거나 k가 0이 될 때까지 반복합니다) 이후 i 인덱스만 증가시킵니다.</li></ul></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> subStr = <span class="string">&quot;ABCABB&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> pi = <span class="title class_">Array</span>(subStr.<span class="property">length</span>).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; subStr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">while</span> (k &gt; <span class="number">0</span> &amp;&amp; subStr[k] !== subStr[i]) &#123;</span><br><span class="line">    k = pi[k - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (subStr[k] === subStr[i]) &#123;</span><br><span class="line">    pi[i] = k + <span class="number">1</span>;</span><br><span class="line">    k++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pi); <span class="comment">// [0,0,0,1,2,0]</span></span><br></pre></td></tr></table></figure><h2 id="▫︎-pi배열과-두-문자열을-이용해-문자열-찾기"><a href="#▫︎-pi배열과-두-문자열을-이용해-문자열-찾기" class="headerlink" title="▫︎ pi배열과 두 문자열을 이용해 문자열 찾기"></a>▫︎ pi배열과 두 문자열을 이용해 문자열 찾기</h2><p>이제 pi 배열을 이용해서 문자열을 찾아보겠습니다. str과 subStr의 각 포인터들을 이동시키면서 str을 순회합니다. 아래 그림과 같은 방식으로 동작합니다.</p><p><img src="https://velog.velcdn.com/images/vbghdl/post/231216cb-a99e-4582-bab3-f4550e5f5bd6/image.png" alt="image.png"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&quot;ABCABCABBD&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> subStr = <span class="string">&quot;ABCABB&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> pi = <span class="title class_">Array</span>(subStr.<span class="property">length</span>).<span class="title function_">fill</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// failure 함수를 통해 pi 배열 설정</span></span><br><span class="line"><span class="keyword">let</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; subStr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">while</span> (k &gt; <span class="number">0</span> &amp;&amp; subStr[k] !== subStr[i]) &#123;</span><br><span class="line">    k = pi[k - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (subStr[k] === subStr[i]) &#123;</span><br><span class="line">    pi[i] = k + <span class="number">1</span>;</span><br><span class="line">    k++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pi 배열을 이용해 문자열 찾기</span></span><br><span class="line"><span class="keyword">let</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> answerIdx = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; str.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">while</span> (j &gt; <span class="number">0</span> &amp;&amp; subStr[j] !== str[i]) &#123;</span><br><span class="line">    j = pi[j - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (subStr[j] === str[i]) &#123;</span><br><span class="line">    <span class="keyword">if</span> (j === subStr.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">      answerIdx.<span class="title function_">push</span>(i - subStr.<span class="property">length</span> + <span class="number">2</span>);</span><br><span class="line">      j = pi[j];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      j++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(answerIdx); <span class="comment">// output: [4] 4번째 문자로 시작하는 하나의 같은 문자열이 존재</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://NamgungJongMin.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://NamgungJongMin.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/KMP/">KMP</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EB%AC%B8%EC%9E%90%EC%97%B4-%EC%B0%BE%EA%B8%B0/">문자열 찾기</category>
      
      
      <comments>https://namgungjongmin.github.io/2024/04/16/algorithm/kmp/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>에라토스테네스의 체 ) 범위 내 소수 구하기</title>
      <link>https://namgungjongmin.github.io/2024/04/08/algorithm/%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98%EC%B2%B4/</link>
      <guid>https://namgungjongmin.github.io/2024/04/08/algorithm/%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98%EC%B2%B4/</guid>
      <pubDate>Mon, 08 Apr 2024 02:15:21 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;▪︎-에라토스테네스의-체&quot;&gt;&lt;a href</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png"></p><h1 id="▪︎-에라토스테네스의-체"><a href="#▪︎-에라토스테네스의-체" class="headerlink" title="▪︎ 에라토스테네스의 체"></a>▪︎ 에라토스테네스의 체</h1><p>에라토스테네스의 체는 빠르게 범위 내 소수들을 찾는 방법입니다. 하나의 수에 대해 소수인지 아닌지를 판별하는 것은 O(N)으로 해결이 가능하지만 범위 내에서 소수들을 찾기 위해서는 추가로 범위 내에 존재하는 K개의 수가 곱해진 O(N*K)의 시간복잡도를 가질 것입니다. 그러나 에라토스테네스의 체를 이용하면 O(N * log logN)의 시간복잡도로 이를 해결할 수 있습니다.</p><h2 id="▫︎-에라토스테네스의-체-원리"><a href="#▫︎-에라토스테네스의-체-원리" class="headerlink" title="▫︎ 에라토스테네스의 체 원리"></a>▫︎ 에라토스테네스의 체 원리</h2><p><img src="https://upload.wikimedia.org/wikipedia/commons/b/b9/Sieve_of_Eratosthenes_animation.gif" alt="gif"></p><ul><li><strong>_출처 : <a href="https://ko.wikipedia.org/wiki/%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98_%EC%B2%B4">https://ko.wikipedia.org/wiki/에라토스테네스의_체</a>_</strong></li></ul><p>step 1) 2부터 소수를 구하고자 하는 구간의 모든 수를 나열한다. 그림에서 회색 사각형으로 두른 수들이 여기에 해당한다.</p><p>step 2) 2는 소수이므로 오른쪽에 2를 쓴다. (빨간색)</p><p>step 3) 자기 자신을 제외한 2의 배수를 모두 지운다.</p><p>step 4) 남아있는 수 가운데 3은 소수이므로 오른쪽에 3을 쓴다. (초록색)</p><p>step 5) 자기 자신을 제외한 3의 배수를 모두 지운다.</p><p>step 6) 남아있는 수 가운데 5는 소수이므로 오른쪽에 5를 쓴다. (파란색)</p><p>step 7) 자기 자신을 제외한 5의 배수를 모두 지운다.</p><p>step 8) 남아있는 수 가운데 7은 소수이므로 오른쪽에 7을 쓴다. (노란색)</p><p>step 9) 자기 자신을 제외한 7의 배수를 모두 지운다.</p><p>step 10) 위의 과정을 반복하면 구하는 구간의 모든 소수가 남는다. (보라색)</p><blockquote><p>범위 최대값의 제곱근보다 작거나 같은 자연수의 배수들만 지우면 된다. 위 예시의 경우 10까지만 배수들을 지워주는 동작을 시행한다.</p></blockquote><h2 id="▫︎-에라토스테네스의-체-구현"><a href="#▫︎-에라토스테네스의-체-구현" class="headerlink" title="▫︎ 에라토스테네스의 체 구현"></a>▫︎ 에라토스테네스의 체 구현</h2><ol><li>2부터 소수를 구하고자하는 구간의 모든 수를 배열의 인덱스를 key로 삼아 0과 1을 제외하고 모두 true로 초기화합니다.</li><li>생성한 배열을 순회하면서 value가 false인 경우 스킵하고, true인 경우 배열 내 해당 index의 배수에 위치하는 모든 값들을 false로 재할당합니다.</li><li>초기 생성한 배열에서 true를 값으로 가진 인덱스들이 소수입니다.</li></ol><h1 id="▪︎-Example-of-Apply"><a href="#▪︎-Example-of-Apply" class="headerlink" title="▪︎ Example of Apply"></a>▪︎ Example of Apply</h1><h2 id="▫︎-100보다-작은-소수-찾기"><a href="#▫︎-100보다-작은-소수-찾기" class="headerlink" title="▫︎ 100보다 작은 소수 찾기"></a>▫︎ 100보다 작은 소수 찾기</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 소수 체크 테이블</span></span><br><span class="line"><span class="keyword">const</span> check = <span class="title class_">Array</span>(<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="number">101</span>)).<span class="title function_">fill</span>(<span class="literal">true</span>).<span class="title function_">fill</span>(<span class="literal">false</span>, <span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 100의 제곱근인 10보다 작은 자연수의 배수들만 지우기</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!check[i]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = i * <span class="number">2</span>; j &lt;= <span class="number">100</span>; j += i) &#123;</span><br><span class="line">    check[j] = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 소수 배열</span></span><br><span class="line"><span class="keyword">const</span> prime = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 체크 테이블의 값이 true인 index가 소수</span></span><br><span class="line">check.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el, idx</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (el) prime.<span class="title function_">push</span>(idx);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(prime);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://NamgungJongMin.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://NamgungJongMin.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98-%EC%B2%B4/">에라토스테네스의 체</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%86%8C%EC%88%98-%EC%B0%BE%EA%B8%B0/">소수 찾기</category>
      
      
      <comments>https://namgungjongmin.github.io/2024/04/08/algorithm/%EC%97%90%EB%9D%BC%ED%86%A0%EC%8A%A4%ED%85%8C%EB%84%A4%EC%8A%A4%EC%9D%98%EC%B2%B4/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>DXDY 테크닉 ) 2차원 배열에서 4방향 움직이기</title>
      <link>https://namgungjongmin.github.io/2024/04/01/algorithm/dxdy%ED%85%8C%ED%81%AC%EB%8B%89/</link>
      <guid>https://namgungjongmin.github.io/2024/04/01/algorithm/dxdy%ED%85%8C%ED%81%AC%EB%8B%89/</guid>
      <pubDate>Mon, 01 Apr 2024 07:25:22 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;코딩테스트에서 2차원 배열</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png"></p><blockquote><p>코딩테스트에서 2차원 배열을 데이터로 주고 그 안에서 포인터를 이동시키는 문제 유형에서 유용하게 사용할 수 있는 방법입니다.</p></blockquote><h1 id="▪︎-dxdy-테크닉"><a href="#▪︎-dxdy-테크닉" class="headerlink" title="▪︎ dxdy 테크닉"></a>▪︎ dxdy 테크닉</h1><p>dxdy 테크닉은 2차원 배열에서 어느 한지점의 포인터를 상하좌우로 간편하게 이동할 수 있는 방법입니다. x방향과 y방향의 direction 정보를 저장한 배열을 생성하고 순서대로 각 데이터를 참조하면서 현재 포인터 기준 4방향의 인덱스를 탐색할 수 있습니다.</p><p><img src="https://velog.velcdn.com/images/vbghdl/post/6e960a32-c62b-4f01-9d10-bbf2828940f9/image.png" alt="image.png"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>],</span><br><span class="line">  [<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>],</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> dx = [<span class="number">0</span>, <span class="number">0</span>, -<span class="number">1</span>, <span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> dy = [-<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 현재 위치를 (1,1) 이라고 할 때, pointer 위치의 값은 20</span></span><br><span class="line"><span class="keyword">const</span> cx = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> cy = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr[cy + dy[i]][cx + dx[i]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// output :</span></span><br><span class="line"><span class="comment">// 2 (pointer 기준 &#x27;상&#x27;)</span></span><br><span class="line"><span class="comment">// 200 (pointer 기준 &#x27;하&#x27;)</span></span><br><span class="line"><span class="comment">// 10 (pointer 기준 &#x27;좌&#x27;)</span></span><br><span class="line"><span class="comment">// 30 (pointer 기준 &#x27;우&#x27;)</span></span><br></pre></td></tr></table></figure><h1 id="▪︎-Example-of-Apply"><a href="#▪︎-Example-of-Apply" class="headerlink" title="▪︎ Example of Apply"></a>▪︎ Example of Apply</h1><p><img src="https://velog.velcdn.com/images/vbghdl/post/043f5a9f-8ae5-44b5-bdf5-251928622fc4/image.png" alt="image.png"></p><p><img src="https://velog.velcdn.com/images/vbghdl/post/384e8f9a-a6a4-4527-8b59-36ec679ee4e4/image.png" alt="image.png"></p><ul><li><a href="https://www.acmicpc.net/problem/1987">https://www.acmicpc.net/problem/1987</a></li></ul><p>이 문제는 (0,0) 위치에서부터 4방향을 움직이되 움직인 위치의 값이 이전에 지나온 값이라면 갈 수 없습니다. 따라서 dxdy 테크닉을 통해 2차원 배열을 재귀로 움직이면서 현재 위치의 값을 visited 변수에 저장하고 이동하면서 참조한 뒤, visited 값이 true라면 재귀를 멈추면 됩니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> input = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;dev/stdin&quot;</span>).<span class="title function_">toString</span>().<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> arr = input.<span class="title function_">slice</span>(<span class="number">1</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> el.<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dx = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, -<span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> dy = [<span class="number">1</span>, -<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> visited = <span class="title class_">Array</span>(<span class="number">26</span>).<span class="title function_">fill</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">let</span> answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">dfs</span> = (<span class="params">depth, x, y</span>) =&gt; &#123;</span><br><span class="line">  answer = answer &lt; depth ? depth : answer;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> nx = x + dx[i];</span><br><span class="line">    <span class="keyword">const</span> ny = y + dy[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 이동할 좌표가 없을 경우 continue</span></span><br><span class="line">    <span class="keyword">if</span> (nx &lt; <span class="number">0</span> || nx &gt;= arr[<span class="number">0</span>].<span class="property">length</span> || ny &lt; <span class="number">0</span> || ny &gt;= arr.<span class="property">length</span>) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="comment">// 이동한 좌표의 알파벳의 아스키코드가 true면 이미 지나온 블록. continue</span></span><br><span class="line">    <span class="keyword">if</span> (visited[arr[ny][nx].<span class="title function_">charCodeAt</span>() - <span class="number">65</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">    visited[arr[ny][nx].<span class="title function_">charCodeAt</span>() - <span class="number">65</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="title function_">dfs</span>(depth + <span class="number">1</span>, nx, ny);</span><br><span class="line">    visited[arr[ny][nx].<span class="title function_">charCodeAt</span>() - <span class="number">65</span>] = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">visited[arr[<span class="number">0</span>][<span class="number">0</span>].<span class="title function_">charCodeAt</span>() - <span class="number">65</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="title function_">dfs</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(answer);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://NamgungJongMin.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://NamgungJongMin.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/DXDY-%ED%85%8C%ED%81%AC%EB%8B%89/">DXDY 테크닉</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EA%B7%B8%EB%9E%98%ED%94%84/">그래프</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      
      <comments>https://namgungjongmin.github.io/2024/04/01/algorithm/dxdy%ED%85%8C%ED%81%AC%EB%8B%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>그래프 ) 배열 데이터로 정제하기</title>
      <link>https://namgungjongmin.github.io/2024/03/25/algorithm/%EA%B7%B8%EB%9E%98%ED%94%84/</link>
      <guid>https://namgungjongmin.github.io/2024/03/25/algorithm/%EA%B7%B8%EB%9E%98%ED%94%84/</guid>
      <pubDate>Mon, 25 Mar 2024 05:35:52 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;코딩테스트에서 그래프와 관</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png"></p><blockquote><p>코딩테스트에서 그래프와 관련된 문제를 만났을 때, 해당 그래프를 순회하고 조작할 수 있는 정제된 형태의 데이터로 만들 필요가 있습니다. 이번 포스트에서는 여러 그래프의 종료들의 분석하는 방법과 함께 그래프 정보를 인접행렬 &#x2F; 인접리스트 데이터로 정제하는 방법에 대해 다뤄보겠습니다.</p></blockquote><h1 id="▪︎-무방향-그래프"><a href="#▪︎-무방향-그래프" class="headerlink" title="▪︎ 무방향 그래프"></a>▪︎ 무방향 그래프</h1><p><img src="https://velog.velcdn.com/images/vbghdl/post/f238072b-4c39-49e0-9a55-b049eecd5750/image.png" alt="image.png"></p><p>무방향 그래프는 노드가 서로 양방향으로 연결되어있는 형태로 방향에 상관없이 연결된 노드에 접근이 가능한 구조입니다. 행을 타겟 노드로, 열을 접근할 노드로 하는 인접행렬 데이터를 배열로 만들어 순회할 수 있습니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 무방향 그래프</span></span><br><span class="line"><span class="keyword">const</span> N = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> input = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">4</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">5</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> graph = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(N + <span class="number">1</span>), <span class="function">() =&gt;</span> <span class="title class_">Array</span>(N + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">input.<span class="title function_">forEach</span>(<span class="function">(<span class="params">array</span>) =&gt;</span> &#123;</span><br><span class="line">  graph[array[<span class="number">0</span>]][array[<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">  graph[array[<span class="number">1</span>]][array[<span class="number">0</span>]] = <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(graph);</span><br></pre></td></tr></table></figure><h1 id="▪︎-방향-그래프"><a href="#▪︎-방향-그래프" class="headerlink" title="▪︎ 방향 그래프"></a>▪︎ 방향 그래프</h1><p><img src="https://velog.velcdn.com/images/vbghdl/post/55c2451c-d4c9-447c-8b82-cbd9bcdef88d/image.png" alt="image.png"></p><p>방향 그래프는 노드가 단방향으로 연결되어있는 형태로 한쪽 방향으로만 연결된 노드에 접근할 수 있습니다. 입력된 그래프 데이터에서 노드가 가리키는 다른 노드의 위치에 대한 정보만을 인접행렬에 저장합니다. (입력 데이터 각 배열의 인덱스의 값의 순서가 의미를 가집니다.)</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 방향 그래프</span></span><br><span class="line"><span class="keyword">const</span> N = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> input = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">5</span>],</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> graph = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(N + <span class="number">1</span>), <span class="function">() =&gt;</span> <span class="title class_">Array</span>(N + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">input.<span class="title function_">forEach</span>(<span class="function">(<span class="params">array</span>) =&gt;</span> &#123;</span><br><span class="line">  graph[array[<span class="number">0</span>]][array[<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(graph);</span><br></pre></td></tr></table></figure><h1 id="▪︎-가중치-그래프"><a href="#▪︎-가중치-그래프" class="headerlink" title="▪︎ 가중치 그래프"></a>▪︎ 가중치 그래프</h1><p><img src="https://velog.velcdn.com/images/vbghdl/post/7601dc13-cef7-4d7a-9ced-03d1bd1acdd7/image.png" alt="image.png"></p><p><img src="https://velog.velcdn.com/images/vbghdl/post/afb6628e-d06b-437f-a4d0-b0c342c642e3/image.png" alt="image.png"></p><p>가중치 그래프는 노드끼리에 연결에 가중치가 붙어있는 구조입니다. 입력 데이터에 [1, 3, 3]과 같이 가중치에 대한 정보가 추가로 들어있습니다. 구현 방법은 위와 같으며 연결된 노드에 1이 아닌 가중치를 저장해주면 됩니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 가중치 무방향 그래프</span></span><br><span class="line"><span class="keyword">const</span> N = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> input1 = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">4</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> graph1 = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(N + <span class="number">1</span>), <span class="function">() =&gt;</span> <span class="title class_">Array</span>(N + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">input1.<span class="title function_">forEach</span>(<span class="function">(<span class="params">array</span>) =&gt;</span> &#123;</span><br><span class="line">  graph1[array[<span class="number">0</span>]][array[<span class="number">1</span>]] = array[<span class="number">2</span>];</span><br><span class="line">  graph1[array[<span class="number">1</span>]][array[<span class="number">0</span>]] = array[<span class="number">2</span>];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(graph1);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* --------------------------------------------------------------------- */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 가중치 방향 그래프</span></span><br><span class="line"><span class="keyword">const</span> input2 = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">2</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">5</span>, <span class="number">5</span>],</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> graph2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(N + <span class="number">1</span>), <span class="function">() =&gt;</span> <span class="title class_">Array</span>(N + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">input2.<span class="title function_">forEach</span>(<span class="function">(<span class="params">array</span>) =&gt;</span> &#123;</span><br><span class="line">  graph2[array[<span class="number">0</span>]][array[<span class="number">1</span>]] = array[<span class="number">2</span>];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(graph2);</span><br></pre></td></tr></table></figure><h1 id="▪︎-노드-개수가-많을-때"><a href="#▪︎-노드-개수가-많을-때" class="headerlink" title="▪︎ 노드 개수가 많을 때"></a>▪︎ 노드 개수가 많을 때</h1><p>노드의 개수가 적을 때에는 인접 행렬 데이터로 변환하여 문제를 풀 수 있지만, 노드의 개수가 많아질수록 그래프 크기가 커져 재귀의 동작이 많아져 문제를 푸는데 어려움이 생깁니다. 이럴 때는 인접행렬 대신 인접리스트를 사용하여 문제를 풀 수 있습니다.</p><p><img src="https://velog.velcdn.com/images/vbghdl/post/f9ba602a-af2f-45a3-ba4d-bdfae53610aa/image.png" alt="image.png"></p><p>인접리스트에서는 graph의 행의 인덱스 만이 노드를 키값으로 의미를 지니게 되고, 열의 인덱스는 인접행렬과 달리 의미를 지니지 않습니다. 각 노드 행에 연결된 노드에 대한 정보를 push해주면 됩니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 인접리스트</span></span><br><span class="line"><span class="keyword">const</span> N = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">const</span> input = [</span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">1</span>, <span class="number">4</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  [<span class="number">2</span>, <span class="number">5</span>],</span><br><span class="line">  [<span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> graph = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="title class_">Array</span>(N + <span class="number">1</span>), <span class="function">() =&gt;</span> <span class="title class_">Array</span>(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">input.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">  graph[el[<span class="number">0</span>]].<span class="title function_">push</span>(el[<span class="number">1</span>]);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(graph);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://NamgungJongMin.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://NamgungJongMin.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EA%B7%B8%EB%9E%98%ED%94%84/">그래프</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EB%B0%B0%EC%97%B4-%EB%B3%80%ED%99%98/">배열 변환</category>
      
      
      <comments>https://namgungjongmin.github.io/2024/03/25/algorithm/%EA%B7%B8%EB%9E%98%ED%94%84/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>재귀함수 ) 멍청한 내 동생도 이해시킨 자바스크립트 재귀함수 구현</title>
      <link>https://namgungjongmin.github.io/2024/03/20/algorithm/%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98/</link>
      <guid>https://namgungjongmin.github.io/2024/03/20/algorithm/%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98/</guid>
      <pubDate>Wed, 20 Mar 2024 07:32:32 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;▪︎-재귀-함수&quot;&gt;&lt;a href=&quot;#▪︎</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png"></p><h1 id="▪︎-재귀-함수"><a href="#▪︎-재귀-함수" class="headerlink" title="▪︎ 재귀 함수"></a>▪︎ 재귀 함수</h1><p>재귀 함수란 자기 자신을 호출하는 함수를 말합니다. 종료 조건이 충족될 때까지 반복적으로 자신을 호출하면서 주어진 동작을 수행합니다. 재귀 함수는 순회할 대상의 상태를 변경하면서 각 대상마다 비슷한 동작을 수행해야 할 때 효율적으로 사용할 수 있습니다.</p><p>[1, 2, 3, 4, 5, 6] 이라는 배열안의 모든 숫자의 합을 구하는 코드를 작성한다고 해보겠습니다. 이 경우 간단하게 배열을 for문으로 순회하는 것으로 풀이가 가능합니다.</p><p>[1, 2, 3, [1, 2, [4, 5], 3], 5, 6] 이러한 형태의 배열은 어떨까요? 3중 for문으로 배열들을 순회하면 가능할 것입니다. 그러나 문제에서 주어지는 입력값이 계속 바뀔 수 있고, 어느정도 중첩될지 예측할 수 없는 상황이라면 기존처럼 코드를 구현하기에는 한계가 있을 것입니다. 이 때 재귀함수를 사용하면 효율적이고 가독성있는 코드 작성이 가능합니다.</p><h2 id="▫︎-재귀-함수의-구성"><a href="#▫︎-재귀-함수의-구성" class="headerlink" title="▫︎ 재귀 함수의 구성"></a>▫︎ 재귀 함수의 구성</h2><p>재귀 함수는 크게 종료 조건과 실행할 동작으로 나누어 구성할 수 있습니다. 실행할 동작에서 주어진 데이터들을 가공하고 동작을 수행하면서 자기 자신을 계속 호출하다가 정해놓은 종료 조건에 다달았을 때 함수를 return하게 하는 것입니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">recursive</span> = (<span class="params">depth, ...</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>( 종료 조건 ) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// depth별 실행할 동작</span></span><br><span class="line">  <span class="title function_">recursive</span>(depth+<span class="number">1</span>, ...)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">recursive</span>(<span class="number">1</span>, ...)</span><br></pre></td></tr></table></figure><h2 id="▫︎-재귀-함수의-depth"><a href="#▫︎-재귀-함수의-depth" class="headerlink" title="▫︎ 재귀 함수의 depth"></a>▫︎ 재귀 함수의 depth</h2><p>재귀 함수를 자바스크립트 코드로 처음 구현할 때, 코드의 동작을 따라가며 이해하는 것이 어렵습니다. 그러나 depth 개념을 적용하여 코드를 구현한다면 원활한 이해가 가능합니다. depth는 재귀 함수가 호출된 깊이, 즉 자신을 몇번째 호출했는지에 대한 데이터입니다.</p><p>순열과 조합을 예시로 지금까지의 내용들을 적용하여 재귀함수를 이해해보겠습니다.</p><h1 id="▪︎-카드를-뽑아보자"><a href="#▪︎-카드를-뽑아보자" class="headerlink" title="▪︎ 카드를 뽑아보자"></a>▪︎ 카드를 뽑아보자</h1><p><img src="https://velog.velcdn.com/images/vbghdl/post/a3d4d3dc-678b-41f8-aeb1-577b763694e2/image.png" alt="image.png"></p><h2 id="▫︎-순열"><a href="#▫︎-순열" class="headerlink" title="▫︎ 순열"></a>▫︎ 순열</h2><p>순열은 순서를 고려하여 카드들을 뽑는 방법입니다. 카드를 하나씩 뽑되, 뽑은 카드는 제외하고 남은 카드들 중에서 하나씩 뽑는 것을 반복하면 됩니다. 그러다가 원하는 개수의 카드를 뽑았을 때 동작을 멈추면 됩니다. 재귀를 사용하면 효율적인 이유는 카드를 뽑는 동작들이 모두 ‘주어진 배열들을 순회하며 하나를 선택한다’라는 같은 동작을 하기 때문입니다. 각 카드를 뽑는 동작, 몇 번째 카드를 뽑는 상황인지에 따라 depth가 부여됩니다. (첫 번째 카드를 뽑으면 depth 1 …)</p><p><img src="https://velog.velcdn.com/images/vbghdl/post/7d8d03e1-e393-4e81-a4ee-00100ad54d93/image.png" alt="image.png"></p><p>이제 우리는 재귀 함수를 구현하기 위해 세가지만 고려하면 됩니다.</p><ol><li>종료 조건</li><li>시행할 동작</li><li>필요한 데이터</li></ol><ol><li><p>종료 조건은 우리가 카드를 3개 다 뽑았을 경우입니다. 따라서 3의 depth까지만 함수를 실행하고 재귀를 멈추면 됩니다.</p></li><li><p>시행할 동작은 남은 카드들 중 한개를 뽑는 것입니다. 카드 배열들을 for문으로 순회하면서 각 자리에 하나씩 넣어주면 됩니다.</p></li><li><p>필요한 데이터는 다음 세가지입니다. depth, 남은 카드들의 정보를 담은 배열, 뽑은 카드들의 배열</p></li></ol><p>위 정보를 바탕으로 처음 소개한 재귀 함수와 동일한 구성으로 코드를 구현해보면 다음과 같습니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cards = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 순열</span></span><br><span class="line"><span class="keyword">const</span> answer = [];</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">permutation</span> = (<span class="params">depth, leftCards, arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 종료 조건</span></span><br><span class="line">  <span class="keyword">if</span> (depth &gt; <span class="number">3</span>) &#123;</span><br><span class="line">    answer.<span class="title function_">push</span>(arr);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// depth별 실행할 동작</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; leftCards.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> cardsArr = leftCards.<span class="title function_">filter</span>(<span class="function">(<span class="params">_, idx</span>) =&gt;</span> idx !== i); <span class="comment">// 다음에 뽑을 수 있는 카드들의 배열</span></span><br><span class="line">    <span class="title function_">permutation</span>(depth + <span class="number">1</span>, cardsArr, [...arr, leftCards[i]]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">permutation</span>(<span class="number">1</span>, cards, []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(answer);</span><br></pre></td></tr></table></figure><h2 id="▫︎-조합"><a href="#▫︎-조합" class="headerlink" title="▫︎ 조합"></a>▫︎ 조합</h2><p>조합은 순서를 고려하지 않고 카드들을 뽑는 방법입니다. 뽑은 카드를 제외하고 다시 카드를 뽑되, 순서가 달라도 같은 카드들을 뽑으면 안되기 때문에 순회할 때 뽑은 카드 뒤쪽의 카드들만을 대상으로 합니다. 이외에는 순열과 같습니다.</p><p><img src="https://velog.velcdn.com/images/vbghdl/post/c1a979e2-f25c-4090-834f-e176722b6787/image.png" alt="image.png"></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cards = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 조합</span></span><br><span class="line"><span class="keyword">const</span> answer = [];</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">combination</span> = (<span class="params">depth, leftCards, arr</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 종료 조건</span></span><br><span class="line">  <span class="keyword">if</span> (depth &gt; <span class="number">3</span>) &#123;</span><br><span class="line">    answer.<span class="title function_">push</span>(arr);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// depth별 실행할 함수</span></span><br><span class="line">  <span class="keyword">if</span> (leftCards.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; leftCards.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> cardsArr = leftCards.<span class="title function_">slice</span>(i + <span class="number">1</span>); <span class="comment">// 다음에 뽑을 수 있는 카드들의 배열</span></span><br><span class="line">    <span class="title function_">combination</span>(depth + <span class="number">1</span>, cardsArr, [...arr, leftCards[i]]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">combination</span>(<span class="number">1</span>, cards, []);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(answer);</span><br></pre></td></tr></table></figure><h1 id="▪︎-Depth가-유동적이라면"><a href="#▪︎-Depth가-유동적이라면" class="headerlink" title="▪︎ Depth가 유동적이라면?"></a>▪︎ Depth가 유동적이라면?</h1><p>위에 설명한 depth 데이터는 재귀가 몇번째까지 타고 들어가며 실행되는지를 쉽게 이해하기 위해 추가한 개념입니다. depth 개념으로 순열과 조합을 구현해보면서 재귀의 동작에 대해 기본적인 이해가 생겼다면 depth에 기반한 재귀가 아닌 함수 그 자체가 데이터를 변동하며 스스로를 호출하는 경우를 생각해보겠습니다.</p><p>위의 depth를 이용한 재귀 함수의 구현은 모든 상황에서 사용할 수는 없습니다. 예를들어 얼만큼 함수를 다시 호출할지가 정해지지 않은 문제의 경우가 그렇습니다. 위의 예시에서는 ‘5장 중 3장의 카드를 뽑는다’ 였지만, 만약 숫자가 적힌 5장의 카드 중 임의의 수의 카드를 뽑아 손안의 카드와 남은 카드를 비교하는 문제에서는 depth를 기준으로 하여 재귀 함수를 호출할 수 없습니다. 아래 문제를 살펴보겠습니다.</p><p><img src="https://velog.velcdn.com/images/vbghdl/post/af2cb58f-e093-48d0-85ce-c5422c8dabbc/image.png" alt="image.png"></p><p>이 문제에서 필요한 정보는 각 부분집합의 경우들과 그와 매치되는 남은 원소들입니다. 위 카드 예시에 대입해보자면 임의의 개수의 카드를 뽑아 순서에 상관하지 않고 뽑는 경우(조합)와 같습니다. 따라서 depth가 아닌 다른 데이터들을 바탕으로 함수를 구성해야 합니다.</p><p>임의의 개수의 원소를 뽑는다는 것은 0개 ~ 모든 원소의 개수까지를 뽑아본다는 것입니다. 따라서 조합을 실행하며 선택된 원소의 이전 원소들은 제외하고 남은 원소들의 수가 0이 될 때 함수를 종료하면 될 것 같습니다. 또한 문제를 푸는데 필요한 정보인 각 부분집합, 즉 뽑은 원소들의 배열과 그에 매칭된 남은 원소들이므로 이 둘을 데이터로하여 재귀 함수를 구성하면 문제를 풀 수 있습니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> n = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> answer = <span class="string">&quot;NO&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> arr1 = [];</span><br><span class="line"><span class="keyword">let</span> arr2 = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">recursive</span> = (<span class="params">leftArr, picks</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (leftArr.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; leftArr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> newArr = [...picks, leftArr[i]]; <span class="comment">// 전체 배열에서 뽑을 수 있는 (남아있는) 카드들</span></span><br><span class="line">    <span class="title function_">recursive</span>(leftArr.<span class="title function_">slice</span>(i + <span class="number">1</span>), newArr); <span class="comment">// i번째 카드를 뽑았다면 i 이후의 카드들이 남아있게 된다.</span></span><br><span class="line">    arr1.<span class="title function_">push</span>(newArr);</span><br><span class="line">    arr2.<span class="title function_">push</span>(arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> !newArr.<span class="title function_">includes</span>(el)));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">recursive</span>(arr, []);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr1.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr1[i].<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur, <span class="number">0</span>) === arr2[i].<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur, <span class="number">0</span>)) answer = <span class="string">&quot;YES&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(answer);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://NamgungJongMin.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://NamgungJongMin.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98/">재귀함수</category>
      
      
      <comments>https://namgungjongmin.github.io/2024/03/20/algorithm/%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>그리디 ) 현재의 최적의 선택을 미래의 최적의 선택으로</title>
      <link>https://namgungjongmin.github.io/2024/03/11/algorithm/%EA%B7%B8%EB%A6%AC%EB%94%94/</link>
      <guid>https://namgungjongmin.github.io/2024/03/11/algorithm/%EA%B7%B8%EB%A6%AC%EB%94%94/</guid>
      <pubDate>Mon, 11 Mar 2024 08:42:22 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;▪︎-그리디-알고리즘&quot;&gt;&lt;a href=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png"></p><h1 id="▪︎-그리디-알고리즘"><a href="#▪︎-그리디-알고리즘" class="headerlink" title="▪︎ 그리디 알고리즘"></a>▪︎ 그리디 알고리즘</h1><p>그리디 알고리즘은 미래를 고려하지 않고, 오직 현재 시점에 가장 좋은 선택을 하는 알고리즘입니다. 현재의 선택이 미래에 어떤 영향을 미칠지는 고려하지 않고, 무조건 현재 가장 빠른 선택, 가장 가치있는 선택을 내리게됩니다. 현실에서는 모든 경우를 고려하면 리소스가 너무 크고, 당장의 최적의 결과만을 쫓는다 하더라도 미래에 (최적의 결과는 아니지만) 어느 정도 보장된 결과를 내고 싶을 때 사용되는 알고리즘입니다.</p><p>그러나 코딩테스트에서 우리는 모든 케이스에 적용되는, 항상 최적의 결과가 되는 답을 찾아내야 합니다. 따라서 현재의 최적의 답이 미래의 최적의 답이 되는 상태에서만 적용할 수 있습니다.</p><h2 id="▫︎-그리디-알고리즘을-적용할-수-있는-경우"><a href="#▫︎-그리디-알고리즘을-적용할-수-있는-경우" class="headerlink" title="▫︎ 그리디 알고리즘을 적용할 수 있는 경우"></a>▫︎ 그리디 알고리즘을 적용할 수 있는 경우</h2><ol><li>현재의 선택이 미래의 선택에 영향을 주지 않는다. (탐욕스러운 선택 조건)</li><li>부분의 최적해가 모이면 전체의 최적해가 된다.</li></ol><p><img src="https://velog.velcdn.com/images/vbghdl/post/897e905f-09ac-4b1f-9087-0228e6c1c9c2/image.png" alt="image.png"></p><p>500원, 100원, 10원 짜리 동전들을 위 그림과 같이 가지고 있다고 할 때, 동전을 가장 적게 사용하면서 2120원을 만드는 방법을 고민해봅시다.</p><p>그리디 알고리즘에 따라 동전을 선택한다면 가장 큰 액수의 동전을 선택하는 것이 현재 상황에서 가장 적은 개수로 2120원에 가까워지는 방법입니다. 이 때 (1) 지금 내가 500원을 선택한 것 때문에 미래에 100원 대신 10원을 선택해야만 경우나 10원 대신 100원을 선택해야만 하는 경우는 없습니다. 또한 (2) 각 동전을 선택하는 시점에서, 남은 액수를 넘지 않는 동전 중 가장 큰 액수의 동전을 선택하면 가장 적은 동전의 수로 2120원을 맞출 수 있습니다.</p><p>대부분의 코딩테스트 경우에서 그리디 알고리즘의 적용은 주어진 데이터를 “각 판단의 시점마다 동일한 동작으로 최적해를 찾을 수 있도록 설정”하고 “예외 조건을 찾아 처리”해주는 형태로 코드를 작성하게 됩니다. 따라서 대부분의 케이스에서 그리디 문제의 핵심은 데이터의 정렬로 볼 수 있습니다. 주어진 데이터를 정렬할 수 있는 여러 방법들을 우선적으로 고려해봅니다.</p><h1 id="▪︎-Example-of-Apply-1"><a href="#▪︎-Example-of-Apply-1" class="headerlink" title="▪︎ Example of Apply 1"></a>▪︎ Example of Apply 1</h1><p><img src="https://velog.velcdn.com/images/vbghdl/post/402330a9-c43a-4c40-bb57-25d641d04470/image.png" alt="image.png"></p><ul><li><a href="https://www.acmicpc.net/problem/1931">https://www.acmicpc.net/problem/1931</a></li></ul><p>위 문제는 겹치지 않고 진행할 수 있는 최대 회의 수를 출력하는 문제입니다. 직관적으로 볼 때 가장 많은 회의를 진행하기 위해서는 가장 빨리 끝나는 회의를 먼저 처리하면 남은 시간이 많아지기 때문에 정답에 가까울 것 같습니다.</p><ol><li>데이터 설정) 입력받은 배열 데이터들의 인덱스 1 을 기준으로 오름차순 정렬합니다. 이 때 인덱스 1의 값이 같은 경우 인덱스 0의 값이 더 작은 (빨리 시작하는) 데이터를 우선합니다.</li><li>예외 조건 처리) 정렬한 데이터를 순차적으로 순회하며 카운팅하되, 아직 이전 회의가 진행중이라면 카운팅하지 않습니다.</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> input = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;dev/stdin&quot;</span>).<span class="title function_">toString</span>().<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> arr = input.<span class="title function_">slice</span>(<span class="number">1</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> el.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>));</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (a[<span class="number">1</span>] === b[<span class="number">1</span>]) <span class="keyword">return</span> a[<span class="number">0</span>] - b[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> a[<span class="number">1</span>] - b[<span class="number">1</span>];</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> prev = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">[start, end]</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (prev &lt;= start) &#123;</span><br><span class="line">    answer++;</span><br><span class="line">    prev = end;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(answer);</span><br></pre></td></tr></table></figure><h1 id="▪︎-Example-of-Apply-2"><a href="#▪︎-Example-of-Apply-2" class="headerlink" title="▪︎ Example of Apply 2"></a>▪︎ Example of Apply 2</h1><p><img src="https://velog.velcdn.com/images/vbghdl/post/5c22b7f5-dea9-48c2-b6ce-d2dd1ba5496a/image.png" alt="image.png"></p><p><img src="https://velog.velcdn.com/images/vbghdl/post/353eb72a-bc62-41f5-9203-3502b0fef543/image.png" alt="image.png"></p><ul><li><a href="https://www.acmicpc.net/problem/11000">https://www.acmicpc.net/problem/11000</a></li></ul><p>이번 문제는 모든 회의가 가능하도록 하는 강의실의 개수를 출력하는 문제입니다. 현재 진행중인 강의의 개수를 추적하고, 지금까지 동시에 진행된 강의가 가장 많을 때마다 정답을 업데이트해주면 풀 수 있을 것 같습니다. 강의의 개수를 추적하는 방법은 강의가 시작되고 끝나는 시간에 값을 부여하여 시간마다 그 값을 더해주면 됩니다. 그렇게 타임 테이블을 만들고 오름차순 정렬하여 데이터를 순회하면 정답을 도출할 수 있습니다.</p><p>타임테이블을 배열로하여 인덱스를 시간으로 추상화하는 방법은 Si, Ti의 최대값이 10^9 이므로 메모리 초과가 뜰 것 같습니다. 따라서 입력받은 데이터들에 저장된 시간들을 O(1)의 시간 복잡도로 조작가능한 Map 함수에서 key : value 형태로 관리하겠습니다. 각 시간에 시작하는 회의가 있을 때 +1, 끝나는 회의가 있을 때 -1을 하면서 시간단위로 강의실 개수를 추적합니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> input = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;dev/stdin&quot;</span>).<span class="title function_">toString</span>().<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> arr = input.<span class="title function_">slice</span>(<span class="number">1</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> el.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="title class_">Number</span>));</span><br><span class="line"><span class="keyword">const</span> timeTable = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 타임테이블 생성</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  timeTable.<span class="title function_">set</span>(arr[i][<span class="number">0</span>], timeTable.<span class="title function_">get</span>(arr[i][<span class="number">0</span>]) ? timeTable.<span class="title function_">get</span>(arr[i][<span class="number">0</span>]) + <span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">  timeTable.<span class="title function_">set</span>(arr[i][<span class="number">1</span>], timeTable.<span class="title function_">get</span>(arr[i][<span class="number">1</span>]) ? timeTable.<span class="title function_">get</span>(arr[i][<span class="number">1</span>]) - <span class="number">1</span> : -<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 타임테이블 정렬</span></span><br><span class="line"><span class="keyword">const</span> answerArr = <span class="title class_">Array</span>.<span class="title function_">from</span>(timeTable).<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a[<span class="number">0</span>] - b[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">let</span> answer = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> lectures = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 타임테이블 순회</span></span><br><span class="line">answerArr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> &#123;</span><br><span class="line">  lectures += el[<span class="number">1</span>];</span><br><span class="line">  <span class="keyword">if</span> (lectures &gt; answer) answer = lectures;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(answer);</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://NamgungJongMin.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://NamgungJongMin.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EA%B7%B8%EB%A6%AC%EB%94%94/">그리디</category>
      
      
      <comments>https://namgungjongmin.github.io/2024/03/11/algorithm/%EA%B7%B8%EB%A6%AC%EB%94%94/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>정렬 ) O(N^2)의 대표적인 정렬 방법</title>
      <link>https://namgungjongmin.github.io/2024/03/07/algorithm/%EC%A0%95%EB%A0%AC/</link>
      <guid>https://namgungjongmin.github.io/2024/03/07/algorithm/%EC%A0%95%EB%A0%AC/</guid>
      <pubDate>Thu, 07 Mar 2024 03:42:44 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;이번 포스트에서는 정렬 알</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png"></p><blockquote><p>이번 포스트에서는 정렬 알고리즘의 가장 기본이 되는 세 가지의 알고리즘을 알아보고 같은 문제를 각각의 알고리즘을 적용하여 풀이해보겠습니다. O(n^2)의 시간복잡도를 가지는 효율이 낮은 정렬 방법들이지만, 코딩테스트 문제의 시간 조건이 충분할 때 간단하게 구현할 수 있습니다.</p></blockquote><h1 id="▪︎-선택-정렬"><a href="#▪︎-선택-정렬" class="headerlink" title="▪︎ 선택 정렬"></a>▪︎ 선택 정렬</h1><p><img src="https://velog.velcdn.com/images/vbghdl/post/0b922ac7-1511-4d62-bb81-03ce00f98da2/image.png" alt="Untitled"></p><p>선택 정렬은 배열의 모든 요소를 비교하여 해당되는 위치에 요소를 삽입함으로써 정렬을 완성하는 알고리즘입니다.</p><ol><li>첫 요소를 기준삼아 시작합니다.</li><li>배열에서 최솟값을 찾아 첫 요소와 교환합니다.</li><li>두 번째 요소부터 시작해 최솟값을 찾아 두 번째 요소와 교환합니다.</li><li>2의 과정을 매 위치에서 반복합니다.</li></ol><h1 id="▪︎-삽입-정렬"><a href="#▪︎-삽입-정렬" class="headerlink" title="▪︎ 삽입 정렬"></a>▪︎ 삽입 정렬</h1><p><img src="https://velog.velcdn.com/images/vbghdl/post/4f3f8406-d792-4914-a75a-9e06f078a8cd/image.png" alt="Untitled"></p><p>삽입 정렬은 매 순서마다 해당 요소를 삽입할 위치를 찾아 정렬을 완성하는 알고리즘입니다.</p><ol><li>정렬되지 않은 첫 요소를 목표로 진행합니다.</li><li>두 번째 요소가 첫 번째 요소보다 작다면 자리를 교환합니다.</li><li>세 번째 요소와 두 번째 요소를 비교하여 교환하고, 교환했다면 그 이전 요소와 다시 비교 &#x2F; 두 번째 요소보다 크다면 네 번째 요소로 넘어갑니다.</li><li>2의 과정을 매 위치에서 반복합니다.</li></ol><h1 id="▪︎-버블-정렬"><a href="#▪︎-버블-정렬" class="headerlink" title="▪︎ 버블 정렬"></a>▪︎ 버블 정렬</h1><p><img src="https://velog.velcdn.com/images/vbghdl/post/13664fbe-8031-4527-bc60-650aadbbe08b/image.png" alt="Untitled"></p><p>버블 정렬은 인접한 두 요소를 비교하여 정렬하는 알고리즘입니다. 가장 큰 요소부터 마지막 인덱스에 위치시키기 때문에 요소의 이동이 마치 거품이 수면으로 올라오는 듯한 모습을 보입니다.</p><ol><li>정렬되지 않은 마지막 요소를 목표로 진행합니다.</li><li>첫 요소와 다음 요소를 비교 첫 요소가 크다면 두 번째 요소와 자리를 교환합니다.</li><li>두 번째 요소와 그 다음 요소를 비교 두 번째 요소가 크다면 세 번째 요소와 자리를 교환합니다.</li><li>동작을 반복하면 마지막 요소에 배열의 가장 큰 값이 위치하게 됩니다.</li><li>이후 1-3 과정을 반복합니다.</li></ol><h1 id="▪︎-문제-적용"><a href="#▪︎-문제-적용" class="headerlink" title="▪︎ 문제 적용"></a>▪︎ 문제 적용</h1><p><img src="https://velog.velcdn.com/images/vbghdl/post/5fed9f67-2632-4b68-8d0f-46e5170ba6c9/image.png" alt="Untitled"></p><h2 id="▫︎-선택-정렬-풀이"><a href="#▫︎-선택-정렬-풀이" class="headerlink" title="▫︎ 선택 정렬 풀이"></a>▫︎ 선택 정렬 풀이</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> answer = [...arr];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (answer[i] &lt;= answer[j]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      [answer[i], answer[j]] = [answer[j], answer[i]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="▫︎-삽입-정렬-풀이"><a href="#▫︎-삽입-정렬-풀이" class="headerlink" title="▫︎ 삽입 정렬 풀이"></a>▫︎ 삽입 정렬 풀이</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> answer = [...arr];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; answer.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (answer[j] &lt; answer[j - <span class="number">1</span>]) [answer[j], answer[j - <span class="number">1</span>]] = [answer[j - <span class="number">1</span>], answer[j]];</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="▫︎-버블-정렬-풀이"><a href="#▫︎-버블-정렬-풀이" class="headerlink" title="▫︎ 버블 정렬 풀이"></a>▫︎ 버블 정렬 풀이</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> answer = [...arr];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = arr.<span class="property">length</span> - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; arr.<span class="property">length</span> - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (answer[j] &lt;= answer[j + <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      [answer[j], answer[j + <span class="number">1</span>]] = [answer[j + <span class="number">1</span>], answer[j]];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://NamgungJongMin.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://NamgungJongMin.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%A0%95%EB%A0%AC/">정렬</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%84%A0%ED%83%9D%EC%A0%95%EB%A0%AC/">선택정렬</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%82%BD%EC%9E%85%EC%A0%95%EB%A0%AC/">삽입정렬</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EB%B2%84%EB%B8%94%EC%A0%95%EB%A0%AC/">버블정렬</category>
      
      
      <comments>https://namgungjongmin.github.io/2024/03/07/algorithm/%EC%A0%95%EB%A0%AC/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>해시 ) KEY 값에 문자열을 부여해 데이터를 저장하는 방법</title>
      <link>https://namgungjongmin.github.io/2024/03/02/algorithm/%ED%95%B4%EC%8B%9C/</link>
      <guid>https://namgungjongmin.github.io/2024/03/02/algorithm/%ED%95%B4%EC%8B%9C/</guid>
      <pubDate>Sat, 02 Mar 2024 13:42:24 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;코딩 테스트 문제 중에 데</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png"></p><blockquote><p>코딩 테스트 문제 중에 데이터를 순회화며 결과를 키 값에 저장해야 할 때가 있습니다. 배열의 인덱스처럼 의미를 부여하여 사용하는 것이 아닌 의미를 지닌 키 값에 직접적으로 데이터를 매칭시킬 수 있는 방법이며, 검색에서의 시간복잡도 또한 O(1)로 효율적인 알고리즘입니다.</p></blockquote><h1 id="▪︎-해시-알고리즘-Hash"><a href="#▪︎-해시-알고리즘-Hash" class="headerlink" title="▪︎ 해시 알고리즘 (Hash)"></a>▪︎ 해시 알고리즘 (Hash)</h1><p>기본적으로 배열에 key: value 값으로 데이터를 저장하면 구현이 가능합니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hashArray = [];</span><br><span class="line"></span><br><span class="line">hashArray[<span class="string">&quot;bus&quot;</span>] = <span class="number">5</span>;</span><br><span class="line">hashArray[<span class="string">&quot;price&quot;</span>] = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hashArray[<span class="string">&quot;bus&quot;</span>]); <span class="comment">// output: 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hashArray); <span class="comment">// output: [ &quot;bus&quot;: 5, &quot;price&quot;: 1000 ]</span></span><br></pre></td></tr></table></figure><p>자바스크립트의 배열은 다른 언어의 배열과는 다릅니다. 다른 언어의 경우는 데이터가 연속적으로 나열되어 구성되는 밀집 배열이고, 자바스크립트는 희소 배열입니다. 즉 여러 개의 자료형을 허락하며 각 자료가 차지하는 메모리 공간 또한 불규칙 할 수 있습니다. 때문에 위의 방식으로도 배열을 만들 수가 있습니다.</p><p>그러나 자바스크립트에서는 더 쉽게 테이블을 사용할 수 있게하는 Map이라는 내장 함수가 있습니다. Map에서 제공되는 여러 프로토타입 메서드를 활용하면 해시 구조에서 원하는 기능을 보다 쉽게 사용할 수 있습니다.</p><h2 id="▫︎-Map-함수의-여러-메서드"><a href="#▫︎-Map-함수의-여러-메서드" class="headerlink" title="▫︎ Map 함수의 여러 메서드"></a>▫︎ Map 함수의 여러 메서드</h2><ol><li>new Map() : 새로운 Map 객체를 만듭니다.</li><li>map.set(key, value) : Map 객체 내의 key와 value를 매핑하여 저장합니다.</li><li>map.get(key) : Map 객체에서 key에 해당하는 value를 반환합니다.</li><li>map.has(key) : Map 객체 내에 key가 존재한다면 true, 존재하지 않는다면 false를 반환합니다.</li><li>map.delete(key) : Map 객체 내에서 key와 매핑된 value 모두를 삭제합니다.</li><li>map.size : Map 객체의 요소 수를 반환합니다.</li><li>map.forEach(callbackFn(key, value)) : 각 value와 key마다 callbackFn을 삽입한 순서대로 실행합니다.</li></ol><h1 id="▪︎-Example-of-Apply-1"><a href="#▪︎-Example-of-Apply-1" class="headerlink" title="▪︎ Example of Apply 1"></a>▪︎ Example of Apply 1</h1><p><img src="https://velog.velcdn.com/images/vbghdl/post/a6f8e97b-881b-494c-8c68-123a2544cbc3/image.png" alt="Untitled"></p><h2 id="▫︎-문제-접근"><a href="#▫︎-문제-접근" class="headerlink" title="▫︎ 문제 접근"></a>▫︎ 문제 접근</h2><ol><li>각 후보에 대한 데이터를 생성한다.</li><li>각 후보가 투표를 받을 때마다 데이터를 갱신한다.</li><li>가장 큰 값을 가진 후보를 출력합니다.</li></ol><p>위 문제에서 후보에 대한 정보를 저장할 때 key 값으로 후보를 지정하는 것이 좋아보입니다. ( 배열의 index에 의미를 부여하여 사용할 수 있지만 가독성이 좋지 않습니다.) Map 객체를 만들고 각 key 값으로 후보를 등록한 뒤 주어진 개표 결과를 순회하며 value를 업데이트 시켜주면 쉽게 풀 수 있습니다. 이후에는 map.forEach 메서드를 통해 Map 객체를 순회하며 가장 높은 value를 지닌 key를 답으로 등록합니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> answer = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="keyword">let</span> max = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> arr = s.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> map.<span class="title function_">set</span>(el, map.<span class="title function_">get</span>(el) + <span class="number">1</span> || <span class="number">1</span>));</span><br><span class="line">  map.<span class="title function_">forEach</span>(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &gt; max) &#123;</span><br><span class="line">      answer = key;</span><br><span class="line">      max = value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="▪︎-Example-of-Apply-2"><a href="#▪︎-Example-of-Apply-2" class="headerlink" title="▪︎ Example of Apply 2"></a>▪︎ Example of Apply 2</h1><blockquote><p>첫 번째 예시 문제가 key : value 형태로 데이터를 저장하기 위해 Map을 사용했다면, 이번 예시는 key에 접근할 때 효율성을 높여 시간복잡도를 줄이기 위해 적용하는 문제 예시를 보겠습니다.</p></blockquote><p><img src="https://velog.velcdn.com/images/vbghdl/post/3f079d73-7378-4a1e-a5e6-3bba18b0f2e1/image.png" alt="image.png"></p><p><img src="https://velog.velcdn.com/images/vbghdl/post/5607d50a-c95e-43a8-850c-0bc8f91c76e2/image.png" alt="image.png"></p><ul><li><a href="https://www.acmicpc.net/problem/1920">https://www.acmicpc.net/problem/1920</a></li></ul><p>위 문제는 [4, 1, 5, 2, 3] &#x2F; [1, 3, 7, 9, 5] 두 배열을 순회하여 겹치는지 확인만하면 되는 간단한 문제입니다. 그런데 N의 입력값 범위를 살펴보면</p><p>1 ≤ N ≤ 100,000 으로 이중 순회로 구현하여 O(n^2)의 시간복잡도로 풀 경우, 시간 제한에 걸리게 됩니다. Map 내장 함수의 경우 key에 접글할 때 O(1)의 시간복잡도를 가지기 때문에 하나의 배열을 Map으로 만들고 나머지 배열 하나를 순회하며 Map에 key 값이 있는지 여부만 판단하면 조건에 맞게 풀 수 있습니다.</p><ul><li>이중 순회로 구현 (시간 초과)</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> input = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;dev/stdin&quot;</span>).<span class="title function_">toString</span>().<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> N = input[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> +v);</span><br><span class="line"><span class="keyword">const</span> M = input[<span class="number">3</span>].<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> +v);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; M.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  N.<span class="title function_">includes</span>(M[i]) ? <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>) : <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>array.prototype.includes() 메서드는 O(N)의 시간복잡도를 가진다.</li><li>Map 함수 적용하여 구현 (조건 통과)</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> input = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;dev/stdin&quot;</span>).<span class="title function_">toString</span>().<span class="title function_">trim</span>().<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> N = input[<span class="number">1</span>].<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> +v);</span><br><span class="line"><span class="keyword">const</span> M = input[<span class="number">3</span>].<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> +v);</span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line">N.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> map.<span class="title function_">set</span>(el, <span class="literal">true</span>));</span><br><span class="line">M.<span class="title function_">forEach</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> (map.<span class="title function_">has</span>(el) ? <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>) : <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>)));</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://NamgungJongMin.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://NamgungJongMin.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%ED%95%B4%EC%8B%9C/">해시</category>
      
      
      <comments>https://namgungjongmin.github.io/2024/03/02/algorithm/%ED%95%B4%EC%8B%9C/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>이진 검색 ) 10억번의 시행 횟수를 단 30번의 시행으로</title>
      <link>https://namgungjongmin.github.io/2024/02/28/algorithm/%EC%9D%B4%EC%A7%84%EA%B2%80%EC%83%89/</link>
      <guid>https://namgungjongmin.github.io/2024/02/28/algorithm/%EC%9D%B4%EC%A7%84%EA%B2%80%EC%83%89/</guid>
      <pubDate>Wed, 28 Feb 2024 05:41:44 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;코딩테스트 문제에서 주어진</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png"></p><blockquote><p>코딩테스트 문제에서 주어진 데이터들을 순회할 때, 답을 찾기 위해 직접적으로 순회하면 시간 조건을 초과하는 경우가 있습니다. 이 때 시간 복잡도를 줄이기 위해 투 포인터와 이진 검색을 고려합니다. 두 개의 포인터로 정답 도출이 가능할 것 같을 때에 투 포인터 알고리즘을 적용하고, 불가능 할 때에는 이진 검색을 적용합니다.</p></blockquote><h1 id="▪︎-이진-검색"><a href="#▪︎-이진-검색" class="headerlink" title="▪︎ 이진 검색"></a>▪︎ 이진 검색</h1><p>이진 검색은 오름차순으로 정렬된 리스트에서 특정한 값의 위치를 찾는 알고리즘입니다. 탐색 범위를 절반씩 줄여나가면서 값을 찾기 때문에 빠른 속도를 보장합니다.</p><p><img src="https://velog.velcdn.com/images/vbghdl/post/9dc74621-e920-484d-95fb-1baf5db7746a/image.png" alt="Untitled"></p><p>위 배열에서 121이라는 숫자가 몇 번째 index에 있는지를 도출해야한다고 생각해봅시다. index 0부터 순회하며 121을 찾을 수 있지만 배열의 범위를 보면 121이 아닌 더 큰 값이 입력으로 들어왔을 경우 최악의 경우 10^9 번의 동작을 순회해야 합니다. 완전 탐색 포스팅에서 확인했듯이 코딩 테스트에서 우리는 10^8 안으로 시행 횟수를 기준으로 생각하기 때문에 이 방법은 불가능 합니다.</p><p>그러면 이진 검색을 활용하면 어떨까요? 최악의 경우에도 30번의 시행만으로 답을 찾아낼 수 있습니다.</p><h2 id="▫︎-이진-검색-구현"><a href="#▫︎-이진-검색-구현" class="headerlink" title="▫︎ 이진 검색 구현"></a>▫︎ 이진 검색 구현</h2><ol><li>인덱스의 최소값 &#x2F; 최대값을 변수로 선언합니다.</li><li>범위 내 중간값을 지닌 인덱스에 위치한 요소를 판단하여 121보다 크다면 최대값을 줄여 범위를 좁히고, 작다면 최소값을 높여 범위를 좁힙니다.</li><li>121을 도출할 때까지 2번의 과정을 반복합니다.</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> start = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> end = <span class="number">1000000000</span>;</span><br><span class="line"><span class="keyword">let</span> answer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">  <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">floor</span>((start + end) / <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (array[mid] &lt;= <span class="number">121</span>) &#123;</span><br><span class="line">    answer = mid;</span><br><span class="line">    start = mid + <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> end = mid - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기본적인 구현 방법은 위와 같고, 도출할 값의 특성에 따라 조금씩 바뀔 수 있습니다. 예를 들어 어떠한 조건에 맞는 최소값을 찾아야 한다면 도출되는 값은 여러개가 될 것이므로 계속 해서 답을 업데이트해야 합니다. 이 때 어떠한 조건문에 답을 업데이트 하는 로직을 추가할지 잘 생각해야 합니다. 위 이진 검색의 구현 코드는 ‘기본적으로 이렇게 작성된다’라고 생각하며 넘어가고 실제 문제 풀이를 통해 어떤식으로 코드가 작성되고 진행되는지 살펴보겠습니다.</p><h2 id="▫︎-최소-x2F-최대값-도출하기"><a href="#▫︎-최소-x2F-최대값-도출하기" class="headerlink" title="▫︎ 최소 &#x2F; 최대값 도출하기"></a>▫︎ 최소 &#x2F; 최대값 도출하기</h2><p>때때로 코딩테스트에서 범위에 속하는 값들 중 최소 &#x2F; 최대값을 찾아야하는 경우도 있습니다. 이 경우 위 코드를 조금 변형하여 풀어낼 수 있습니다. 이 때 answer에 mid값을 할당하는 코드의 위치가 중요합니다. 최소값을 구할 때는 end값을 조정할 때 answer값을 재할당 해야하고, 최대값을 구할 때는 start값을 조정할 때 answer를 재할당 해야합니다. 밑에 작성할 문제 풀이를 통해 확인해봅시다.</p><h1 id="▪︎-Example-of-Apply"><a href="#▪︎-Example-of-Apply" class="headerlink" title="▪︎ Example of Apply"></a>▪︎ Example of Apply</h1><p><img src="https://velog.velcdn.com/images/vbghdl/post/99dfef51-7ab0-4432-add4-84111d2cfa56/image.png" alt="Untitled"></p><p>모든 문제에서 처음 완전 탐색이 가능한지부터 생각합니다. 위 문제에서는 N 과 M에 따라 데이터를 몇번이나 순회할지 결정되어집니다. 입력 설명을 볼 때 N의 범위가 1000보다 작습니다. M에 따라 최악의 경우 1000개를 순회하면서 각 요소들을 어떤 DVD에 넣을지를 분기한다면, 시행 횟수는 2^8을 가볍게 넘을 것입니다. 따라서 이진 검색을 통해 나올 수 있는 정답의 범위를 정하고 조건에 부합하는 값 중 최소값을 찾아보겠습니다.</p><h2 id="▫︎-문제-접근"><a href="#▫︎-문제-접근" class="headerlink" title="▫︎ 문제 접근"></a>▫︎ 문제 접근</h2><ol><li>한 노래를 쪼개서 두 개의 DVD에 녹화할 수 없기 때문에, 용량 크기는 최소한 주어진 배열의 요소 중 최대값보다는 커야한다.</li><li>모두 한 DVD에 넣는 경우보다 용량이 커질 경우는 없다. 따라서 곡의 길이를 전부 합한 값이 최대값이다.</li><li>이진 검색을 통해 조건을 판별한다.</li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">m, arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> answer = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> start = <span class="title class_">Math</span>.<span class="title function_">max</span>(...arr);</span><br><span class="line">  <span class="keyword">let</span> end = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (start &lt;= end) &#123;</span><br><span class="line">    <span class="keyword">let</span> mid = <span class="title class_">Math</span>.<span class="title function_">ceil</span>((start + end) / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> arr) &#123;</span><br><span class="line">      <span class="keyword">if</span> (sum + x &lt;= mid) sum += x;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (sum + x &gt; mid) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        sum = x;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (count &lt;= m) &#123;</span><br><span class="line">      end = mid - <span class="number">1</span>;</span><br><span class="line">      answer = mid;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (count &gt; m) start = mid + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://NamgungJongMin.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://NamgungJongMin.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%9D%B4%EC%A7%84%EA%B2%80%EC%83%89/">이진검색</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%9D%B4%EC%A7%84%ED%83%90%EC%83%89/">이진탐색</category>
      
      
      <comments>https://namgungjongmin.github.io/2024/02/28/algorithm/%EC%9D%B4%EC%A7%84%EA%B2%80%EC%83%89/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>투 포인터 ) 이중 순회가 시간 제한에 걸릴 때 고려해볼 알고리즘</title>
      <link>https://namgungjongmin.github.io/2024/02/21/algorithm/%ED%88%AC%ED%8F%AC%EC%9D%B8%ED%84%B0/</link>
      <guid>https://namgungjongmin.github.io/2024/02/21/algorithm/%ED%88%AC%ED%8F%AC%EC%9D%B8%ED%84%B0/</guid>
      <pubDate>Wed, 21 Feb 2024 01:31:13 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;코딩테스트에서 배열을 순회</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png"></p><blockquote><p>코딩테스트에서 배열을 순회해야 할 때, 입력값의 조건이 시간 제한에 걸려 단순 순회가 불가능한 경우가 있습니다. 이 때 고려해야할 알고리즘은 ‘투포인터’ 와 ‘이분 탐색’ 입니다. 이 포스팅은 투포인터 알고리즘을 통해 해당 문제를 해결하는 방법을 다루고 있습니다.</p></blockquote><h1 id="▪︎-투-포인터-알고리즘-Two-Pointer"><a href="#▪︎-투-포인터-알고리즘-Two-Pointer" class="headerlink" title="▪︎ 투 포인터 알고리즘 (Two-Pointer)"></a>▪︎ 투 포인터 알고리즘 (Two-Pointer)</h1><p>투 포인터 알고리즘은 주어진 배열에서 각각 다른 원소를 가리키는 2개의 포인터를 조작하면서 원하는 값을 도출할 때까지 탐색하는 알고리즘입니다. 각 포인터들의 위치를 정하고 이동하면서 포인트의 위치를 기록하고 처리합니다.</p><h2 id="▫︎-시간-복잡도"><a href="#▫︎-시간-복잡도" class="headerlink" title="▫︎ 시간 복잡도"></a>▫︎ 시간 복잡도</h2><p>순회마다 항상 두 포인터 중 하나는 1씩 증가합니다. 각 포인터는 최대 N까지 증가할 수 있습니다. 기존 배열의 순회에서는 2중 for문을 통해 두 지점을 특정해야하기 때문에 O(N^2)의 시간 복잡도를 지닌 반면, 투포인터 알고리즘을 사용하게 되면 한번의 단순 순회를 통해 포인트들을 이동하면서 처리하기 때문에 O(N)의 시간 복잡도로 문제를 해결할 수 있습니다.</p><h1 id="▪︎-Example-of-Apply"><a href="#▪︎-Example-of-Apply" class="headerlink" title="▪︎ Example of Apply"></a>▪︎ Example of Apply</h1><p><img src="https://velog.velcdn.com/images/vbghdl/post/3b5a5e6f-c79c-4544-948f-361d1fea8540/image.png" alt="Untitled"></p><h2 id="▫︎-문제-접근"><a href="#▫︎-문제-접근" class="headerlink" title="▫︎ 문제 접근"></a>▫︎ 문제 접근</h2><p>문제 해결을 위한 스텝을 나눠보면 다음과 같습니다.</p><ol><li>공통 원소를 찾는다.</li><li>오름차순으로 출력한다.</li></ol><p>1번을 해결하기 위한 가장 쉬운 방법은 두 배열 중 하나를 순회하면서 나머지 배열에 현재 인덱스의 요소들이 있는지 판별하는 것입니다. 이후 판별된 요소들만 오름차순으로 정리하면 다음과 같이 풀이할 수 있습니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">8</span>];</span><br><span class="line"><span class="keyword">let</span> answer = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr1.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr2.<span class="title function_">includes</span>(arr1[i])) answer.<span class="title function_">push</span>(arr1[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(answer.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)); <span class="comment">// output: [2,3,5]</span></span><br></pre></td></tr></table></figure><p>그러나 입력값을 기준으로 시간 복잡도를 판단해보면 O(N^2)의 시간복잡도를 가진 위 코드는 최악의 경우 10^8 이내의 실행되지 못하는 코드입니다. 따라서 O(N)의 시간 복잡도로 해당 문제를 해결해야 합니다.</p><h2 id="▫︎-투-포인터-알고리즘으로-접근"><a href="#▫︎-투-포인터-알고리즘으로-접근" class="headerlink" title="▫︎ 투 포인터 알고리즘으로 접근"></a>▫︎ 투 포인터 알고리즘으로 접근</h2><ol><li>주어진 배열들을 정렬한다.</li><li>각 배열의 첫 인덱스 요소를 포인터로 가리킨다. (p1, p2)</li><li>p1 인덱스 요소와 p2 인덱스 요소를 비교하며 같다면 answer array에 추가하고 다르다면 p2를 이동한다. 이 때 p2가 p1보다 크다면 p1의 위치를 이동시킨다.</li></ol><h2 id="▫︎-풀이"><a href="#▫︎-풀이" class="headerlink" title="▫︎ 풀이"></a>▫︎ 풀이</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">arr1, arr2</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> answer = [];</span><br><span class="line">  <span class="keyword">let</span> p1 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> p2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  arr1.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line">  arr2.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (p1 &lt; arr1.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr1[p1] === arr2[p2]) &#123;</span><br><span class="line">      answer.<span class="title function_">push</span>(arr1[p1++]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      p2++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p1 &lt; p2) &#123;</span><br><span class="line">      p1++;</span><br><span class="line">      p2 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://NamgungJongMin.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://NamgungJongMin.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%ED%88%AC%ED%8F%AC%EC%9D%B8%ED%84%B0/">투포인터</category>
      
      
      <comments>https://namgungjongmin.github.io/2024/02/21/algorithm/%ED%88%AC%ED%8F%AC%EC%9D%B8%ED%84%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>누적합 ) 배열의 누적합을 처리하여 구간합을 알아내기</title>
      <link>https://namgungjongmin.github.io/2024/02/17/algorithm/%EB%88%84%EC%A0%81%ED%95%A9/</link>
      <guid>https://namgungjongmin.github.io/2024/02/17/algorithm/%EB%88%84%EC%A0%81%ED%95%A9/</guid>
      <pubDate>Sat, 17 Feb 2024 10:11:11 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;▪︎-누적합-알고리즘&quot;&gt;&lt;a href=&quot;</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png"></p><h1 id="▪︎-누적합-알고리즘"><a href="#▪︎-누적합-알고리즘" class="headerlink" title="▪︎ 누적합 알고리즘"></a>▪︎ 누적합 알고리즘</h1><p><img src="https://velog.velcdn.com/images/vbghdl/post/ced1c26e-def1-4e96-9dfb-23e08916bed5/image.png" alt="image.png"></p><p>누적합 알고리즘은 이전 누적합에 대해 현재 인덱스의 값을 더하여 구하는 방법입니다. 기본적인 방식으로 합을 구하게 되면</p><p>1 &#x2F; 1+2 &#x2F; 1+2+3 &#x2F; 1+2+3+4 &#x2F; 1+2+3+4+5 의 방식대로 값을 구하게 되는데 이에 비해 훨씬 효율적이며 구간합을 구할 때 이중 순회를 거치지 않고 누적합을 저장한 데이터를 토대로 최종 인덱스와 시작 인덱스의 설정만으로 답을 찾아낼 수 있습니다. 적용 예시를 보면 쉽게 이해하실 수 있습니다.</p><h1 id="▪︎-Example-of-Apply"><a href="#▪︎-Example-of-Apply" class="headerlink" title="▪︎ Example of Apply"></a>▪︎ Example of Apply</h1><p><img src="https://velog.velcdn.com/images/vbghdl/post/31e8c361-d960-4b83-a3f9-29f17781b9b7/image.png" alt="image.png"></p><p><img src="https://velog.velcdn.com/images/vbghdl/post/19cf461a-e0f6-4614-947e-7a21523234c7/image.png" alt="image.png"></p><ul><li><a href="https://www.acmicpc.net/problem/11659">https://www.acmicpc.net/problem/11659</a></li></ul><p>위 문제는 배열의 1<del>3번째 누적합, 2</del>4번째 누적합, 5~5번째 누적합을 구하면되는 간단한 문제입니다. 그러나 저 세 케이스를 순회하면서 다시 for문을 통해 원소들을 합하게되면 O(N^2)의 시간복잡도로 최악의 경우 10^10의 시행횟수를 갖게되어 1초 (10^8) 시간제한을 통과할 수 없습니다. 이 때 누적합 알고리즘을 적용하여 주어진 배열의 누적합을 따로 데이터로 저장해놓고 단순 접근과 연산만으로 답을 찾아낼 수 있습니다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> input = fs</span><br><span class="line">  .<span class="title function_">readFileSync</span>(<span class="string">&quot;dev/stdin&quot;</span>)</span><br><span class="line">  .<span class="title function_">toString</span>()</span><br><span class="line">  .<span class="title function_">trim</span>()</span><br><span class="line">  .<span class="title function_">split</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">  .<span class="title function_">map</span>(<span class="function">(<span class="params">el</span>) =&gt;</span> el.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> +v));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [N, M] = input[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">const</span> numbers = input[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> arr = input.<span class="title function_">slice</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> prefixSum = <span class="title class_">Array</span>(N + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">0</span>); <span class="comment">// 문제에서 인덱스가 기준이 아닌 몇번 째인지로 판단하기 때문에 1부터 데이터를 저장</span></span><br><span class="line"><span class="keyword">let</span> answer = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 누적합 데이터를 생성</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">  prefixSum[i + <span class="number">1</span>] = prefixSum[i] + numbers[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 누적합 데이터를 단순 연산하는 것 만으로 구간합 도출</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  answer.<span class="title function_">push</span>(prefixSum[arr[i][<span class="number">1</span>]] - prefixSum[arr[i][<span class="number">0</span>] - <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(answer.<span class="title function_">join</span>(<span class="string">&quot;\n&quot;</span>));</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      
      <category domain="https://NamgungJongMin.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://NamgungJongMin.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EB%88%84%EC%A0%81%ED%95%A9/">누적합</category>
      
      
      <comments>https://namgungjongmin.github.io/2024/02/17/algorithm/%EB%88%84%EC%A0%81%ED%95%A9/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>완전탐색 ) 1초 제한시간 기준을 통한 적용 여부 판별</title>
      <link>https://namgungjongmin.github.io/2024/02/14/algorithm/%EC%99%84%EC%A0%84%ED%83%90%EC%83%89/</link>
      <guid>https://namgungjongmin.github.io/2024/02/14/algorithm/%EC%99%84%EC%A0%84%ED%83%90%EC%83%89/</guid>
      <pubDate>Wed, 14 Feb 2024 06:16:15 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;&lt;img src=&quot;https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;코딩테스트 대부분의 문제에</description>
        
      
      
      
      <content:encoded><![CDATA[<p><img src="https://velog.velcdn.com/images/vbghdl/post/e0ccaaba-5d36-47b1-b7ec-e658aad36afe/image.png"></p><blockquote><p>코딩테스트 대부분의 문제에서 주어진 자료를 순회하여 답을 도출하는 경우가 많습니다. 이 때 어떠한 알고리즘으로 순회를 하여 문제에 접근하는 것이 좋을지 1초의 제한 시간 기준을 통해 판별하는 방법을 정리한 글입니다.</p></blockquote><h1 id="▪︎-시간-복잡도를-고려한-기준-적용"><a href="#▪︎-시간-복잡도를-고려한-기준-적용" class="headerlink" title="▪︎ 시간 복잡도를 고려한 기준 적용"></a>▪︎ 시간 복잡도를 고려한 기준 적용</h1><p>대부분의 코딩테스트 시험의 시간 제한 조건은 1초~5초 내외입니다. 따라서 실행 시간을 1초 내로 줄이는 것을 목표로 문제에 접근하는 것이 코딩테스트를 준비하는 데 있어 합리적입니다.</p><p>테스트를 하는 각 서버의 CPU에 따라서 같은 코드라도 실행 시간이 천차 만별이므로 “엄격하게 시간 복잡도를 몇으로 해야된다”라고 규정하는 것은 어렵습니다. 그러나 관행적으로 10^8 이내의 시행 횟수를 1초 내외의 제한 시간을 통과한 것으로 인정하고 그에 맞게 설계를 하는 편입니다.</p><p>데이터를 순회하여 정답을 도출해야하는 문제에서는 제일 먼저 완전 탐색(Brute Force)을 고려합니다. 이 때 전체적인 풀이의 흐름을 그려보고 시행 횟수를 빠르게 판단해보는 것이 좋습니다. 10^8 이내의 시행 횟수로 정답 도출이 가능하다면 완전 탐색을 적용하고, 불가능하다면 다른 알고리즘을 고려해보아야 합니다.</p><h1 id="▪︎-Example-of-Apply"><a href="#▪︎-Example-of-Apply" class="headerlink" title="▪︎ Example of Apply"></a>▪︎ Example of Apply</h1><p><img src="https://velog.velcdn.com/images/vbghdl/post/e9d6afc6-dd84-4a94-83bd-7ccda4919c61/image.png" alt="Untitled"></p><h2 id="▫︎-문제-접근"><a href="#▫︎-문제-접근" class="headerlink" title="▫︎ 문제 접근"></a>▫︎ 문제 접근</h2><p>이 문제에서 우리는 총 3번의 순회가 필요합니다.</p><ol><li>2번의 반복문을 통한 멘토 학생과 멘티 학생이 매칭</li><li>1번의 반복문을 통한 테스트 결과 순회</li></ol><p>가장 먼저 완전 탐색을 고려하여 10^8 이내의 시행 횟수로 정답 도출이 가능한지 확인합니다. 제시된 입력 설명에서 최악의 시행 횟수 경우를 산정해보면 20<em>20</em>10 입니다. 따라서 다른 알고리즘의 고려 없이 바로 완전 탐색을 적용 가능합니다.</p><h2 id="▫︎-풀이"><a href="#▫︎-풀이" class="headerlink" title="▫︎ 풀이"></a>▫︎ 풀이</h2><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">solution</span>(<span class="params">test</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> answer = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= test[<span class="number">0</span>].<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">1</span>; j &lt;= test[<span class="number">0</span>].<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i === j) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> isMatched = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; test.<span class="property">length</span>; k++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (test[k].<span class="title function_">indexOf</span>(i) &gt; test[k].<span class="title function_">indexOf</span>(j)) &#123;</span><br><span class="line">          isMatched = <span class="literal">false</span>;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (isMatched) answer += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="▫︎-시간복잡도가-충분하지-않다면"><a href="#▫︎-시간복잡도가-충분하지-않다면" class="headerlink" title="▫︎ 시간복잡도가 충분하지 않다면"></a>▫︎ 시간복잡도가 충분하지 않다면</h2><ol><li>포인터 두 개로 두번의 순회를 한번으로 줄일 수 있다면 ⇒ 투포인터 사용</li><li>순회 내에서 배열의 조작 메서드의 O(n)의 시간복잡도를 그 이하로 낮추려면 ⇒ 자료구조 사용<ul><li>우선순위 큐 &#x2F; 연결리스트</li></ul></li><li>배열 탐색을 O(1)로 하고 싶다면 ⇒ 해시 (Map 함수) 사용</li><li>정렬된 데이터를 기준으로 답을 찾을 수 있을 것 같다면 ⇒ 이진 검색 사용</li></ol><p>위의 예시들은 제가 코딩테스트에서 완전 탐색으로 접근할 때 시행횟수가 크다면 고려하는 다음 접근들입니다. 각 케이스 별 정리와 예시 문제 풀이는 알고리즘 카테고리 내 포스팅에서 확인하실 수 있습니다.</p>]]></content:encoded>
      
      
      <category domain="https://NamgungJongMin.github.io/categories/Algorithm/">Algorithm</category>
      
      
      <category domain="https://NamgungJongMin.github.io/tags/JavaScript/">JavaScript</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/">알고리즘</category>
      
      <category domain="https://NamgungJongMin.github.io/tags/%EC%99%84%EC%A0%84%ED%83%90%EC%83%89/">완전탐색</category>
      
      
      <comments>https://namgungjongmin.github.io/2024/02/14/algorithm/%EC%99%84%EC%A0%84%ED%83%90%EC%83%89/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
